* common settings
** Increase gc threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
#+end_src
** Increase amount data emacs read from process
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src
** Always ask before quit
#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src
** Custom variables
#+begin_src emacs-lisp
  ;; Save to kill ring before kill
  (setq save-interprogram-paste-before-kill t)
  ;; to put emacs's autogenerating lisp code into separate file
  (setq custom-file "~/.emacs.d/.emacs-custom.el")
  ;; Treat all custom themes as safe
  (setq custom-safe-themes t)
  ;; Suppress starting emacs message
  (setq inhibit-startup-message 1)
  ;; Top frame: <filename with full path>
  (setq frame-title-format "%b")
  (defvar x-strech-cursor)
  (setq x-strech-cursor 1)
  ;; Copy/paste from another system apps
  (setq x-select-enable-clipboard t)
#+end_src
** Enable/Disable some minor modes
#+begin_src emacs-lisp
  ;; Mode line config
  (column-number-mode 1)
  ;; Hide default TOOLBAR
  (hide-ifdef-mode 1)
  ;; Hightlight brackets
  (show-paren-mode t)
  ;; Hightlight current line
  (global-hl-line-mode 1)
  ;; Display the current function name in the mode line
  (which-function-mode 1)
  ;; Disable toolbar
  (tool-bar-mode 0)
  ;; Disable menubar
  (menu-bar-mode 0)
  ;; Disable scrollbar
  (scroll-bar-mode 0)

  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
  (blink-cursor-mode 0)
  ;; Overwrite selected text
  (delete-selection-mode 1)
  ;; left fringe for indicators, right fringe for long lines
  ;;(set-fringe-mode '(8 . 8))
  (defun ide-mode ()
    (interactive)
    (menu-bar-mode 1)
    (tool-bar-mode 1)
    (centaur-tabs-mode 1)
    (treemacs)
    )

  (defun ide-mode-exit ()
    (interactive)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (centaur-tabs-mode -1)
    (treemacs)
    )
#+end_src
** Scrolling without moving point
Useful feature but not sure about bindings yet
#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
  (defun gcm-scroll-down ()
    (interactive)
    (scroll-up 1)
    (next-line)
    )
  (defun gcm-scroll-up ()
    (interactive)
    (scroll-down 1)
    (previous-line))
  (global-set-key (kbd "M-p") 'gcm-scroll-up)
  (global-set-key (kbd "M-n") 'gcm-scroll-down)
#+end_src
** Disable alarm bell for "C-g"
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+end_src
** y-or-n-p
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Do not need backup and autosave files
#+begin_src emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# file
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-<right>") 'forward-word)
  (global-set-key (kbd "C-<left>") 'backward-word)
  (global-set-key (kbd "C-S-<down>") 'term-send-raw)
  (global-set-key "\M-g\M-g" 'goto-line)
  (global-set-key "\C-c\C-c" 'compile)
  (global-set-key "\C-c\C-k" 'indent-for-comment)
  (global-set-key "\C-c\C-l" 'indent-new-comment-line)
  (global-set-key "\C-c\C-s" 'kill-compilation)
  (global-set-key "\C-c\M-b" 'emu-backend-find)
  (global-set-key [(shift f1)] 'next-error)
  (define-key global-map [f1] 'next-error)
  (define-key global-map [f2] 'previous-error)
  (define-key global-map [f3] 'previous-error)
  (define-key global-map [f5]  'revert-buffer)
  (define-key global-map [f6]  'ivy-resume)
  (define-key global-map [f7]  'repeat-complex-command)
  (define-key global-map [f9]  'manual-entry)     ;; man <command>
  (define-key global-map [f11]'grep)
  (define-key global-map [f27]'beginning-of-buffer)
  (define-key global-map [f29]'scroll-down)
  (define-key global-map [f33]'end-of-buffer)
  (define-key global-map [f35]'scroll-up)
  (global-unset-key [home])
  (global-unset-key [end])
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
  (define-key function-key-map [home] 'beginning-of-buffer)
  (define-key function-key-map [end] 'end-of-buffer)
#+end_src
** line numbers configuration
#+begin_src emacs-lisp
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook
                  markdown-mode-hook
                  rst-mode-hook
                  ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** comment / comment out
#+begin_src emacs-lisp
  ;; Comment/uncomment current line
  (defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))
  (global-set-key (kbd "C-c C-v") 'comment-or-uncomment-region-or-line)

  ;;(add-hook 'c++-mode-hook (lambda () (setq comment-start "/* " comment-end   " */")))
#+end_src
** ansi-term
Some old settings related to running emacs
in terminal mode. Most likely can be removed.
#+begin_src emacs-lisp
  (defun fix-performance-bug ()
    (setq bidi-paragraph-direction 'left-to-right))
  (add-hook 'term-mode-hook 'fix-performance-bug)
#+end_src
** ediff
Make vertical split by default
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src
** auto-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Makefile\\..+" . makefile-mode))
  (add-to-list 'auto-mode-alist '("Dockerfile.+" . dockerfile-mode))
  (add-to-list 'auto-mode-alist '("\\.*bashrc" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.profile" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.xinitrc" . shell-script-mode))
#+end_src
** browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "microsoft-edge")
#+end_src
** autosave bookmarks
#+begin_src emacs-lisp
  (setq bookmark-save-flag t)
#+end_src
** file path to clipboard
Useful when you need to enter file's location in terminal
#+begin_src emacs-lisp
  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))

#+end_src
** kill all buffers except current one
#+begin_src emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
** always truncate line by default
Otherwise it can slow down emacs by a lot
#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src
** set temp directory used by some packages
#+begin_src emacs-lisp
  (setq-default temporary-file-directory "~/.cache/emacs")
  (unless (file-exists-p temporary-file-directory)
    (make-directory temporary-file-directory))
#+end_src
** buffer revert automatically
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src
** undo
#+begin_src emacs-lisp
  (global-set-key "\M-u" 'undo)
#+end_src
** new-line-no-break
#+begin_src emacs-lisp
  (defun open-line-without-break-of-line ()
    "Insert a newline above the current line and put point at beginning."
    (interactive)
    (unless (bolp)
      (beginning-of-line))
    (newline)
    (forward-line -1)
    (indent-according-to-mode))

  ;; newline-without-break-of-line
  (defun newline-without-break-of-line ()
    "1. move to end of the line.
        2. insert newline with index"

    (interactive)
    (let ((oldpos (point)))
      (end-of-line)
      (newline-and-indent)))
  (global-set-key (kbd "C-o") 'open-line-without-break-of-line)
  (global-set-key (kbd "C-M-m") 'newline-without-break-of-line)
#+end_src
** yank-and-indent
#+begin_src emacs-lisp
  (defun yank-and-indent ()
    "1. yank
     2. indent-region"

    (interactive)
    (let ((beg (point)))
      (yank)
      (indent-region beg (point))))
  (global-set-key "\C-\M-y" 'yank-and-indent)
#+end_src
* theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :init
    (setq zenburn-scale-org-headlines t)
    (load-theme 'zenburn t)
    :custom-face
    (vertico-current ((t :inherit hl-line :extend t :background "#111111" :foreground nil :underline nil)))
    :config
    (set-face-background 'show-paren-mismatch "orange red")
    (set-face-foreground 'which-func "#93E0E3")
    (set-face-background 'hl-line "#111111")

    ;; hightlight function calls (they have default color otherwise)
    (defvar font-lock-function-call-face
      'font-lock-function-call-face
      "Face name to use for format specifiers.")

    (defface font-lock-function-call-face
      '((t . (:foreground "#DFAF8F" :bold t)))
      "Face to display method calls in.")

    (font-lock-add-keywords
     'c-mode
     '(("\\(\\w+\\)\\s-*\("
        (1 font-lock-function-call-face)))
     t)

    ;; change 'select region' faces
    ;; (set-face-attribute 'region nil :background "#276E9E" :foreground "#FFFFFF")
    ;; also highlight underlying entities in documentation
    (set-face-attribute 'button nil :foreground "#7F9F7F")
    ;; Font settings really depends on host / monitor / remote desktop / etc
    ;; possible alternative -CTDB-Fira Code-regular-normal-normal-*-16-*-*-*-m-0-iso10646-1
    (set-frame-font "-Xos4-Terminus-normal-normal-normal-*-18-*-*-*-m-*-iso10646-1")
    (setq default-frame-alist '((font . "-Xos4-Terminus-normal-normal-normal-*-18-*-*-*-m-*-iso10646-1")))
    (set-face-font 'fixed-pitch "-Xos4-Terminus-normal-normal-normal-*-18-*-*-*-m-*-iso10646-1")
    ;; little bit transparency
    (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
    (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
    ;; fullscreen
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    )

    (defvar ligatures-FiraCode
    '("--" "---" "==" "===" "!=" "!==" "=!=" "=:=" "=/=" "<=" ">=" "&&" "&&&" "&=" "++" "+++"
     "***" ";;" "!!" "??" "?:" "?." "?=" "<:" ":<" ":>" ">:" "<>" "<<<" ">>>" "<<" ">>" "||" "-|"
     "_|_" "|-" "||-" "|=" "||=" "##" "###" "####" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:"
     "#!" "#=" "^=" "<$>" "<$" "$>" "<+>" "<+ +>" "<*>" "<* *>" "</" "</>" "/>" "<!--"
     "<#--" "-->" "->" "->>" "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>" "==>" "=>"
     "=>>" ">=>" ">>=" ">>-" ">-" ">--" "-<" "-<<" ">->" "<-<" "<-|" "<=|" "|=>" "|->" "<-"
     "<~~" "<~" "<~>" "~~" "~~>" "~>" "~-" "-~" "~@" "[||]" "|]" "[|" "|}" "{|" "[<" ">]"
     "|>" "<|" "||>" "<||" "|||>" "|||>" "<|>" "..." ".." ".=" ".-" "..<" ".?" "::" ":::"
     ":=" "::=" ":?" ":?>" "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__"))

  (use-package ligature
    ;; git repo [https://github.com/mickeynp/ligature.el.git]
    :straight (:host github :repo "mickeynp/ligature.el")
    ;;:load-path "<Path to repo>"
    :config
    (ligature-set-ligatures 'prog-mode ligatures-FiraCode)
    (global-ligature-mode t))
  #+end_src
* editing stuff
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil)
    )
#+end_src
** hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :config (global-hungry-delete-mode))
#+end_src
** aggressive-indent
#+begin_src emacs-lisp
  (use-package aggressive-indent)
#+end_src
** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :after (org)
    :init
    ;; disable M-q fill paragraph"
    (defun my-expand-region-bind-hook()
      (local-unset-key (kbd "M-q"))
      )
    (add-hook 'c-mode-hook 'my-expand-region-bind-hook)
    (add-hook 'c++-mode-hook 'my-expand-region-bind-hook)
    :config
    ;; expand region seems to be not working properly with this mode enabled
    (setq shift-select-mode nil)
    :bind
    ("M-q" . er/expand-region)
    )
#+end_src
** smartparens
** expreg
#+begin_src emacs-lisp
  (use-package expreg)

#+end_src
#+begin_src emacs-lisp
  (use-package smartparens
    :config (smartparens-global-mode t)
    :custom (sp-escape-quotes-after-insert nil)
    :hook (minibuffer-setup . smartparens-mode)
    :bind
    ("C-c i u" . sp-unwrap-sexp)
    ("C-c i k" . sp-kill-sexp)
    ("C-c i r" . sp-rewrap-sexp)
    )
#+end_src
** iedit
#+begin_src emacs-lisp
  (defun iedit-current-func-mode()
    (interactive)
    (if (bound-and-true-p iedit-mode)
        (iedit-mode)
      (iedit-mode-toggle-on-function)
      )
    )

  (use-package iedit
    :bind
    (("C-;" . iedit-current-func-mode)
     ("C-:" . iedit-mode)
     :map iedit-mode-keymap
     ("<tab>" . iedit-next-occurrence)
     ("<backtab>" . iedit-prev-occurrence)))
#+end_src
** visual-regexp
#+begin_src emacs-lisp
  (use-package visual-regexp
    :bind
    (("C-c r" . vr/replace)
     ("C-c q" . vr/query-replace)
     )
    )
#+end_src
** ialign
#+begin_src emacs-lisp
  (use-package ialign)
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-enable-key "r"))
#+end_src
** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :init
    (move-text-default-bindings)
    )
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure nil
    :straight nil
    :init
    (setq treesit-language-source-alist
          '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
            (c . ("https://github.com/tree-sitter/tree-sitter-c"))
            (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
            (css . ("https://github.com/tree-sitter/tree-sitter-css"))
            (go . ("https://github.com/tree-sitter/tree-sitter-go"))
            (html . ("https://github.com/tree-sitter/tree-sitter-html"))
            (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
            (json . ("https://github.com/tree-sitter/tree-sitter-json"))
            (markdown . ("https://github.com/ikatyang/tree-sitter-markdown"))
            (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
            (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
            (make . ("https://github.com/alemuller/tree-sitter-make"))
            (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
            (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "ocaml/src" "ocaml"))
            (python . ("https://github.com/tree-sitter/tree-sitter-python"))
            (php . ("https://github.com/tree-sitter/tree-sitter-php"))
            (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "typescript/src" "typescript"))
            (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
            (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
            (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
            (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
            (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
    )
#+end_src

** dired
Hide extra information by default
#+begin_src emacs-lisp
  (use-package dired-single)
  (use-package dired
    :ensure nil   ;; native emacs package
    :straight nil ;; native emacs package
    :commands (dired dired-jump)
    :hook (dired-mode-hook . (lambda () (interactive)
                               (dired-omit-mode 1)
                               (dired-hide-details-mode 1)
                               ))
    :config
    (setq dired-listing-switches "-agho --group-directories-first")
    )
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
                ("H" . dired-hide-dotfiles-mode))
    )
  (use-package dired-gitignore
    :hook (dired-mode . dired-gitignore-mode)
    :bind (:map dired-mode-map
                ("h" . dired-gitignore-mode))
    )
#+end_src
** peep-dired
Show file at point in other window
#+begin_src emacs-lisp
  (use-package peep-dired)
#+end_src
** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+end_src
** multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this)
    )
#+end_src
* navigation
** custom
#+begin_src emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
#+end_src
** ag
#+begin_src emacs-lisp
  (use-package ag)
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :disabled t
    :diminish ivy-mode
    :bind
    (("C-c C-r" . ivy-resume)
     ("M-x"  . counsel-M-x)
     ("C-x C-f" . counsel-find-file))
    :custom-face
    (ivy-current-match ((t
                         :background "#111111"
                         :underline nil
                         :foreground nil
                         )))
    :config
    (setq ivy-format-function 'ivy-format-function-arrow)
    (progn
      (ivy-mode    1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      )
    )
#+end_src
** smex
Needed for nicer counsel
#+begin_src emacs-lisp
  (use-package smex
    :init
    (smex-initialize)
    )
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :disabled t
    :bind
    ("C-x C-M-f" . counsel-fzf)
    (:map ivy-minibuffer-map
          ("M-y" . ivy-next-line))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-pretty)
    :config (counsel-mode 1)
    )
#+end_src
** counsel-projectile
Use ivy for projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :disabled t
    :config (counsel-projectile-mode)
    )
#+end_src
** counsel-tramp
#+begin_src emacs-lisp
  (use-package counsel-tramp)
#+end_src
** ibuffer
*** ibuffer-vc
#+begin_src emacs-lisp
  (use-package ibuffer-vc)
#+end_src
#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)	;
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("magit" (name . "^magit.*$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode) (mode . shell-script-mode)))
                 ("c/c++" (or
                           (mode . c++-mode)
                           (mode . c-mode)))
                 ("tcl" (or
                         (mode . tcl-mode)
                         ))
                 ("log-files" (name . "^\\.log$|messages[.]?[1-9]*$"))
                 ;; ("log-files" (name . "^\\.log$"))
                 ("cnf-files" (name . "^\\.cnf$"))
                 ("xml-files" (name . "^\\.xml$"))
                 ("other-languages" (or
                                     (mode . java-mode)
                                     (mode . python-mode)
                                     (mode . groovy-mode)
                                     ))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ("gdb" (or (mode . gdb-threads-mode) (mode . gud-mode) (mode . gdb-locals-mode) (mode . gdb-inferior-io-mode)))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; Explicitly require ibuffer-vc to get its column definitions, which
  ;; can't be autoloaded
  (require 'ibuffer-vc)

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
  ;; Use more human readable 'ls' options
  (setq dired-listing-switches "-lahF --group-directories-first")
#+end_src
*** ibuffer-tramp
#+begin_src emacs-lisp
  (use-package ibuffer-tramp)
#+end_src
** bufler
#+begin_src emacs-lisp
  (use-package bufler)
#+end_src
** smooth-scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :config
    (setq smooth-scroll-margin 15)
    (smooth-scrolling-mode 1)
    )
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :init
    (defun avy-goto-line-smart()
      (interactive)
      (avy-goto-line)
      (smarter-move-beginning-of-line 1)
      )
    :bind
    ("M-o" . avy-pop-mark)
    ("M-j" . avy-goto-char-timer)
    ("M-l" . avy-goto-line-smart)
    (:map isearch-mode-map ("M-j" . avy-isearch))
    :custom-face
    (avy-goto-char-timer-face ((t :background "#111111")))
    (avy-lead-face ((t :background "#276E9E" :foreground "#FFFFFF" )))
    :commands (avy-goto-word-1 avy-goto-char-2 avy-goto-char-timer)
    :config
    (setq avy-timeout-seconds 0.40)
    (setq avy-keys '(?a ?s ?d ?f ?g ?j ?l ?o
                        ?v ?b ?n ?, ?/ ?u ?p ?e ?.
                        ?c ?q ?\;))
    (setq avy-single-candidate-jump nil)
    (setq avy-dispatch-alist '((?m . avy-action-mark)
                               (?i . avy-action-ispell)
                               (?z . avy-action-zap-to-char)
                               (?  . avy-action-embark)
                               (?= . avy-action-define)
                               (?M . avy-action-mark-to-char)
                               (?h . avy-action-helpful)
                               (?x . avy-action-exchange)

                               (11 . avy-action-kill-line)
                               (25 . avy-action-yank-line)

                               (?w . avy-action-copy)
                               (?k . avy-action-kill-stay)
                               (?y . avy-action-yank)
                               (?t . avy-action-teleport)

                               (?W . avy-action-copy-whole-line)
                               (?K . avy-action-kill-whole-line)
                               (?Y . avy-action-yank-whole-line)
                               (?T . avy-action-teleport-whole-line)))

    (defun avy-action-easy-copy (pt)
      (unless (require 'easy-kill nil t)
        (user-error "Easy Kill not found, please install."))
      (goto-char pt)
      (cl-letf (((symbol-function 'easy-kill-activate-keymap)
                 (lambda ()
                   (let ((map (easy-kill-map)))
                     (set-transient-map
                      map
                      (lambda ()
                        ;; Prevent any error from activating the keymap forever.
                        (condition-case err
                            (or (and (not (easy-kill-exit-p this-command))
                                     (or (eq this-command
                                             (lookup-key map (this-single-command-keys)))
                                         (let ((cmd (key-binding
                                                     (this-single-command-keys) nil t)))
                                           (command-remapping cmd nil (list map)))))
                                (ignore
                                 (easy-kill-destroy-candidate)
                                 (unless (or (easy-kill-get mark) (easy-kill-exit-p this-command))
                                   (easy-kill-save-candidate))))
                          (error (message "%s:%s" this-command (error-message-string err))
                                 nil)))
                      (lambda ()
                        (let ((dat (ring-ref avy-ring 0)))
                          (select-frame-set-input-focus
                           (window-frame (cdr dat)))
                          (select-window (cdr dat))
                          (goto-char (car dat)))))))))
        (easy-kill)))

    (defun avy-action-exchange (pt)
      "Exchange sexp at PT with the one at point."
      (set-mark pt)
      (transpose-sexps 0))

    (defun avy-action-helpful (pt)
      (save-excursion
        (goto-char pt)
        ;; (helpful-at-point)
        (my/describe-symbol-at-point)
        )
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (defun avy-action-define (pt)
      (cl-letf (((symbol-function 'keyboard-quit)
                 #'abort-recursive-edit))
        (save-excursion
          (goto-char pt)
          (dictionary-search-dwim))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (defun avy-action-embark (pt)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (defun avy-action-kill-line (pt)
      (save-excursion
        (goto-char pt)
        (kill-line))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (defun avy-action-copy-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-kill-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-yank-whole-line (pt)
      (avy-action-copy-whole-line pt)
      (save-excursion (yank))
      t)

    (defun avy-action-teleport-whole-line (pt)
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)

    (defun avy-action-mark-to-char (pt)
      (activate-mark)
      (goto-char pt))
    )
#+end_src
** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :init
    (global-set-key [remap other-window] 'ace-window)
    (setq aw-background nil)
    :custom
    (aw-scope 'frame)
    :custom-face
    ;;(aw-leading-char-face ((t :inherit ace-jump-face-foreground :height 3.0)))
    (aw-leading-char-face ((t :foreground "#FFFFFF" :background "#276E9E" :height 3.0)))
    )
#+end_src
** browse-kill-ring
An alternative of counsel-yank-pop
#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :init
    (defface browse-kill-ring-separator-face
      '((t :foreground "#276E9E"
           :weight bold
           ))
      "Face for browse-kill-ring-separator."
      )
    :config
    (setq browse-kill-ring-highlight-current-entry t)
    (setq browse-kill-ring-separator "-------------------------------------------")
    (setq browse-kill-ring-separator-face 'my-browse-kill-ring-separator-face)
    :bind ("M-y" . browse-kill-ring))
#+end_src
** isearch
Enable possibility to exit isearch with leaving cursor
at the beginning of the word (C-Ret)  
#+begin_src emacs-lisp
  (define-key isearch-mode-map (kbd "C-m")
              #'isearch-exit-other-end)
  (defun isearch-exit-other-end ()
    "Exit isearch, at the opposite end of the string."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))
#+end_src
Isearch other window
#+begin_src emacs-lisp
  (defun isearch-forward-other-window (prefix)
    "Function to isearch-forward in other-window."
    (interactive "P")
    (unless (one-window-p)
      (save-excursion
        (let ((next (if prefix -1 1)))
          (other-window next)
          (isearch-forward)
          (other-window (- next))))))

  (defun isearch-backward-other-window (prefix)
    "Function to isearch-backward in other-window."
    (interactive "P")
    (unless (one-window-p)
      (save-excursion
        (let ((next (if prefix 1 -1)))
          (other-window next)
          (isearch-backward)
          (other-window (- next))))))

  (define-key global-map (kbd "C-M-s") 'isearch-forward-other-window)
  (define-key global-map (kbd "C-M-r") 'isearch-backward-other-window)
#+end_src
** ace-isearch
#+begin_src emacs-lisp
  (use-package ace-isearch)
#+end_src
** centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :init
    (setq centaur-tabs-set-icons t
          centaur-tabs-set-close-button nil
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "●"
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-bar 'over
          centaur-tabs-style "alternate")
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-change-fonts "DejaVu Sans" 100)
    :custom-face
    (tab-line ((t (:background "#2B2B2B"))))
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src
** rg
#+begin_src emacs-lisp
  (use-package rg
    :config (rg-enable-default-bindings))
#+end_src

** transpose-frame
#+begin_src emacs-lisp
  (use-package transpose-frame)
#+end_src
** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :config (persp-mode))
#+end_src
** goto-line-preview
#+begin_src emacs-lisp
  (use-package goto-line-preview
    :config
    (global-set-key [remap goto-line] 'goto-line-preview))
#+end_src
** beacon
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (setq beacon-color 0.5)
    (beacon-mode 1)
    :bind ("M-]" . beacon-blink)
    )
#+end_src
** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode) (auto-save-mode)
    :config
    (savehist-mode 1)
    (recentf-mode)
    (setq vertico-multiform-commands
          '((consult-imenu buffer indexed)
            (execute-extended-command unobtrusive)))
    (setq vertico-preselect 'directory)
    )
  (use-package vertico-multiform
    :straight (:host github :repo "emacs-straight/vertico"
                     :files ("extensions/vertico-multiform.el")))

  (use-package vertico-posframe)
  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :config
    (setq marginalia-align 'center)
    :custom-face
    (marginalia-documentation ((t :inherit font-lock-comment-face)))
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    )
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package consult
    :custom
    ;;(consult-preview-key 'any)
    (consult-find-args "find . -not ( -wholename */.* -prune )")
    :config
    (setq consult-preview-key "M-.")
    ;;(consult-customize consult-theme :preview-key '(:debounce 2 any))
    :bind
    ("M-i" . consult-imenu)
    )

  (use-package consult-dir
    :commands (consult-dir)
    :bind (("C-x C-d" . consult-dir)
           :map minibuffer-local-completion-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))

  (use-package consult-yasnippet)

  (use-package consult-lsp
    :after (consult lsp))

  (use-package embark
    :bind
    ("M-." . embark-dwim)
    ("C-." . embark-act)
    ("C-h B" . embark-bindings)
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    (setq embark-indicators '(embark-mixed-indicator embark-highlight-indicator embark-isearch-highlight-indicator))
    (setq embark-mixed-indicator-delay 2)
    )
  (use-package embark-consult
    :after (embark consult))

  (use-package affe
    :config
    ;; Manual preview key for `affe-grep'
    (consult-customize affe-grep :preview-key "M-."))
#+end_src

#+RESULTS:
: t

** meow
#+begin_src emacs-lisp
  (use-package meow
    :init
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak-dh)
      (meow-motion-overwrite-define-key
       ;; Use e to move up, n to move down.
       ;; Since special modes usually use n to move down, we only overwrite e here.
       '("e" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       '("?" . meow-cheatsheet)
       ;; To execute the originally e in MOTION state, use SPC e.
       '("e" . "H-e")
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("1" . meow-expand-1)
       '("2" . meow-expand-2)
       '("3" . meow-expand-3)
       '("4" . meow-expand-4)
       '("5" . meow-expand-5)
       '("6" . meow-expand-6)
       '("7" . meow-expand-7)
       '("8" . meow-expand-8)
       '("9" . meow-expand-9)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("/" . meow-visit)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("e" . meow-prev)
       '("E" . meow-prev-expand)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-right)
       '("I" . meow-right-expand)
       '("j" . meow-join)
       '("k" . meow-kill)
       '("l" . meow-line)
       '("L" . meow-goto-line)
       '("m" . meow-mark-word)
       '("M" . meow-mark-symbol)
       '("n" . meow-next)
       '("N" . meow-next-expand)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("r" . meow-replace)
       '("s" . meow-insert)
       '("S" . meow-open-above)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-search)
       '("w" . meow-next-word)
       '("W" . meow-next-symbol)
       '("x" . meow-delete)
       '("X" . meow-backward-delete)
       '("y" . meow-save)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))
    :config
    (meow-setup)
    (meow-global-mode 1)
    )
#+end_src
** god-mode
#+begin_src emacs-lisp
  (use-package god-mode
    :disabled t ;;trying meow
    :init
    (defun my-god-mode-update-cursor-type ()
      (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))
    :bind
    ("<escape>" . god-mode-all)
    ;; remap some keys to make them easier for god mode
    ("C-x C-b" . switch-to-buffer) ;; "C-x b" initially
    ("C-x C-o" . ace-window)       ;; "C-x o" initially
    ("C-x C-0" . delete-window)    ;; "C-x 0" initially
    ("C-x C-1" . delete-other-windows)
    ("C-x C-2" . split-window-below)
    ("C-x C-3" . split-windows-right)
    ("C-x C-g" . magit-status)     ;; "C-x g" initially
    ("C-x C-r" . revert-buffer)    ;; 'find-file-readonly' initially
    (:map god-local-mode-map
          ("z" . repeat)
          ("i" . god-local-mode)
          ("[" . backward-paragraph)
          ("]" . forward-paragraph)
          )
    :config
    (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
    )
#+end_src
** bicycle
#+begin_src emacs-lisp
  (use-package bicycle
    :after outline
    :bind (:map outline-minor-mode-map
                ([C-tab] . bicycle-cycle)
                ([backtab] . bicycle-cycle-global)))

  (use-package prog-mode
    :straight (:type built-in)
    :hook
    (prog-mode . hs-minor-mode)
    (prog-mode . outline-minor-mode)
    )
#+end_src
* code navigation
** lsp-mode
#+begin_src emacs-lisp
  ;; must be define before lsp mode for some reason
  (use-package lsp-mode
    :after (which-key orderless)
    :commands (lsp lsp-deffered)
    :init
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure flex
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-clients-clangd-executable "clangd-15")
    (setq lsp-clients-clangd-args '(
                                    ;;"--clang-tidy"
                                    "--completion-style=detailed"
                                    "--background-index"
                                    "--enable-config"
                                    ))
    (setq clang-format-executable "clang-format-15")
    (setq lsp-auto-guess-root t)
    (setq lsp-signature-render-documentation t)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-headerline-breadcrumb-segments '(symbols))
    (setq lsp-headerline-breadcrumb-icons-enable t)
    (setq lsp-symbol-highlighting-skip-current t)
    (setq lsp-imenu-sort-methods '(position))
    (setq lsp-completion-provider :none)
    (setq lsp-idle-delay 0.1)
    :config
    (lsp-enable-which-key-integration t)
    (eldoc-mode nil)
    :hook
    ((c++-mode c-mode c++-ts-mode c-ts-mode bash-ts-mode python-ts-mode) . lsp)
    (lsp-completion-mode . my/lsp-mode-setup-completion)
    :bind
    (:map lsp-command-map ("r e" . lsp-iedit-highlights))
    (:map lsp-command-map ("e" . consult-lsp-diagnostics))
    ("M-." . xref-find-definitions)
    ("M-?" . xref-find-references)
    ("M-," . xref-pop-marker-stack)
    :custom-face
    (lsp-face-semhl-default-library ((t (:inherit unspecified ))))
    (lsp-face-semhl-interface ((t (:inherit unspecified ))))
    (lsp-face-semhl-keyword ((t (:weight normal ))))
    (lsp-face-semhl-static ((t (:weight normal ))))
    (lsp-face-semhl-variable ((t (:inherit unspecified ))))
    )
  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol
    :bind
    ("C-c C-g" . lsp-ivy-workspace-symbol))
  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background "#4F4F4F"))))
    (lsp-face-highlight-textual ((t :background "#7F9F7F" :foreground "#FFFFFD" :weight normal)))
    (lsp-face-highlight-read ((t :background "#7F9F7F" :foreground "#FFFFFD" :weight normal)))
    :init
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-doc-header nil)
    (setq lsp-ui-doc-show-with-mouse nil)
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-position 'top)
    (setq lsp-ui-doc-use-childframe t)
    (setq lsp-ui-imenu-auto-refresh t)
    :config
      (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)
    )
  (use-package lsp-treemacs
    :commands (lsp-treemacs-errors-list lsp-treemacs-symbols)
    :after (treemacs)
    :config
    (setq lsp-treemacs-symbols-position-params '((side . left)
                                                 (slot . 2)
                                                 (window-width . 60)))
    (setq lsp-treemacs-theme "Default")
    (lsp-treemacs-sync-mode 1)
    )
  (use-package dap-mode
    :config
    (require 'dap-lldb)
    (require 'dap-cpptools)
    )
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    )
#+end_src
*** flycheck-posframe
#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :after flycheck
    :hook (flycheck-mode . flycheck-pos-tip-mode)
    )
#+end_src
** corfu
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-delay 0.0)
    (corfu-auto-prefix 0)
    :init
    (global-corfu-mode)
    :custom-face
    (corfu-default ((t (:background "#4F4F4F" ;; :foreground
                                    ))))
    (completions-common-part ((t (:foreground "#93E0E3"))))
    (corfu-annotations ((t (:inherit font-lock-comment-face))))
    (corfu-current ((t (:background "#2B2B2B"))))
    )
  (use-package corfu-quick
    :after (corfu)
    :straight (:host github :repo "emacs-straight/corfu"
                     :files ("extensions/corfu-quick.el"))
    :bind (:map corfu-map
                ("M-j" . corfu-quick-complete)
                ("C-q" . corfu-quick-insert)))
  (use-package corfu-popupinfo
    :after (corfu)
    :straight (:host github :repo "emacs-straight/corfu"
                     :files ("extensions/corfu-popupinfo.el"))
    :config (setq corfu-popupinfo-delay '(1.0 . 0.2))
    )
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
  (use-package corfu-terminal
    :after corfu
    :config
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :requires yasnippet)
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    )
#+end_src
*** ivy-yasnippet
#+begin_src emacs-lisp
  (use-package ivy-yasnippet
    :requires yasnippet)
#+end_src
** cpp-auto-include
#+begin_src emacs-lisp
  (use-package cpp-auto-include)
#+end_src
** hide-if-def
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'hide-ifdef-mode)
#+end_src
** hideshow-org
#+begin_src emacs-lisp
  (use-package hideshow-org
    :bind ("C-t" . hs-toggle-hiding))
#+end_src
** tabs and indentations
#+begin_src emacs-lisp
  ;;(customize-variable (quote tab-stop-list))
  (setq c-default-style "bsd"
        c-basic-offset 4)
  (custom-set-variables
   '(tab-stop-list (number-sequence 4 120 4)))
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'cperl-indent-level 'tab-width)
  ;; don't indent "case" branch in "switch" according to coding style
  (add-hook 'c-mode-common-hook
            (lambda ()
              (c-set-offset 'case-label '0)))
#+end_src
** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode 1))
#+end_src
** quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src
** git-messenger
#+begin_src emacs-lisp
  (use-package git-messenger
    :config
    (setq git-messenger:use-magit-popup t))
#+end_src
** git-timemachine
#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src
** clang-format
   #+begin_src emacs-lisp
     (use-package clang-format)
   #+end_src
** gdb
#+begin_src emacs-lisp
(setq gdb-show-changed-values t)
(setq gdb-restore-window-configuration-after-quit t)
(add-hook 'kill-buffer-hook 'comint-write-input-ring)
#+end_src

** ws-butler
   #+begin_src emacs-lisp
     (use-package ws-butler
       :hook (prog-mode . ws-butler-mode))
   #+end_src
** c++-mode
Disable namespace indentation with TAB
#+begin_src emacs-lisp
  (defun my-c-setup ()
     (c-set-offset 'innamespace [0]))
  (add-hook 'c++-mode-hook 'my-c-setup)
#+end_src
* project/git stuff
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-completion-system 'auto)
    (setq projectile-enable-caching t)
    (setq compilation-scroll-output t)
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    (:map projectile-command-map
          ("s r" . consult-ripgrep))
    )
#+end_src
** treemacs
#+begin_src emacs-lisp
    (use-package treemacs
      :defer t
      :config
	(setq treemacs-follow-after-init          t
	      treemacs-width                      60
	      treemacs-indentation                2
	      treemacs-git-integration            t
	      treemacs-collapse-dirs              3
	      treemacs-silent-refresh             nil
	      treemacs-change-root-without-asking nil
	      treemacs-sorting                    'alphabetic-desc
	      treemacs-show-hidden-files          t
	      treemacs-never-persist              nil
	      treemacs-is-never-other-window      nil
	      treemacs-goto-tag-strategy          'refetch-index
	      treemacs-position                   'left)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode nil)
	(setq treemacs-no-png-images nil)
      :bind
      (:map global-map
	    ([f8]         . treemacs)
	    ("M-0"        . treemacs-select-window)
	    ("C-c 1"      . treemacs-delete-other-windows)
	    )
       :custom-face
       (treemacs-root-face ((t
			    :Weight 'bold
			    :height 1.4
			    )))
			    )
    (use-package treemacs-all-the-icons
      :config
      (treemacs-load-theme "all-the-icons")
      )

    (use-package treemacs-magit
      :after magit)

    (use-package treemacs-projectile
      :config
      (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package sqlite3)
  (use-package magit
    :bind
    (("C-x g" . magit-status)
     ("C-c m f" . magit-find-file)
     ("C-c m F" . magit-find-file-other-window)
     :map magit-file-section-map
     ("RET" . magit-diff-visit-file-other-window)
     :map magit-hunk-section-map
     ("RET" . magit-diff-visit-file-other-window))
    :custom-face
    ;; revert diff faces which was changed to more bright version
    (magit-diff-added ((t (:background "#2F4F2F"))))
    (magit-diff-added-highlight ((t (:background "#3F5F3F"))))
    (magit-diff-removed ((t (:backgorund "#6C3333"))))
    (magit-diff-removed-highlight ((t (:background "#7C4343"))))
    ;; use yellow for magit 'in progress' command at mode-line
    (magit-mode-line-process ((t :inherit 'mode-line-buffer-id )))

    :config
    (setq magit-diff-refine-hunk t)
    (setq transient-display-buffer-action '(display-buffer-below-selected))
    (setq magit-ediff-dwim-show-on-hunks t)
    (transient-define-suffix magit-submodule-update-all ()
      "Update all submodules"
      :description "Update All (git submodule update --init --recursive)"
      (interactive)
      (magit-with-toplevel
        (magit-run-git-async "submodule" "update" "--init" "--recursive")))

    (transient-append-suffix 'magit-submodule "u"
      '("U" magit-submodule-update-all))

    (setq ediff-make-buffers-readonly-at-startup t)
    (defun ediff-mode-face-config-hook ()
      (set-face-attribute 'ediff-even-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-even-diff-B nil :inherit 'magit-diff-added)
      (set-face-attribute 'ediff-odd-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-odd-diff-B nil :inherit 'magit-diff-added))
    (add-hook 'ediff-mode 'ediff-mode-face-config-hook)
    :hook
    (ediff-mode . ediff-mode-face-config-hook)
    )

  (use-package with-editor)

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
         "~/.emacs.d/plugins/magit/Documentation/"))
#+end_src
** forge
   #+begin_src emacs-lisp
     (use-package forge
       :after magit
     )
   #+end_src
** code-review
   #+begin_src emacs-lisp
     (use-package code-review
       :disabled t
       :after magit
     )
   #+end_src
** smerge
#+begin_src emacs-lisp
(use-package smerge-mode
:bind (:map smerge-mode-map
("M-p" . smerge-prev)
("M-n" . smerge-next)))
#+end_src
** git-modes
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src
** fasd
   #+begin_src emacs-lisp
     (use-package fasd
       :config
       (setenv "_FASD_DATA" (concat (getenv "HOME") "/.cache/fasd/.fasd"))
       (global-fasd-mode 1)
       (setq fasd-enable-initial-prompt nil)
       :bind ("M-z" . fasd-find-file)
       )
   #+end_src
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :straight (:type built-in)
    ;; to use some magit faces
    :after magit
    :init
    (defun eshell-find-in-history (prefix &optional query)
      "Use fasd to open a file, or a directory with dired.
       If PREFIX is positive consider only directories.
       If PREFIX is -1 consider only files.
       If PREFIX is nil consider files and directories.
       QUERY can be passed optionally to avoid the prompt."
      (interactive "P")
      (unless query (setq query (if fasd-enable-initial-prompt
                                    (read-from-minibuffer "Fasd query: ")
                                  "")))
      (let* ((prompt "Fasd query: ")
             (results
              (split-string
               ;;(insert-file-contents "/home/eduplens/.emacs.d/eshell/history" nil 0 500)
               (f-read-text "/home/eduplens/.emacs.d/eshell/history")
               "\n" t))
             (command (when results
                        ;; set `this-command' to `fasd-find-file' is required because
                        ;; `read-from-minibuffer' modifies its value, while `ivy-completing-read'
                        (completing-read prompt results nil t)))
             (insert command)
             )
        ))
    (defun corfu-send-shell (&rest _)
      "Send completion candidate when inside comint/eshell."
      (cond
       ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
        (eshell-send-input))
       ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
        (comint-send-input))))
    :config
    (advice-add #'corfu-insert :after #'corfu-send-shell)
    ;; disable corfu-auto for eshell
    (add-hook 'eshell-mode-hook
              (lambda ()
                (setq-local corfu-auto nil)
                (corfu-mode)))
    (setq eshell-prompt-function
          (lambda ()
            (concat
             (propertize "┌─[" 'face `(:foreground "green"))
             (propertize (user-login-name) 'face `(:inherit magit-branch-current))
             (propertize "]──[" 'face `(:foreground "green"))
             (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
             (propertize "]\n" 'face `(:foreground "green"))
             (propertize "└─>" 'face `(:foreground "green"))
             (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green"))
             )))
    )
  (use-package pcmpl-args)
#+end_src
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-buffer-name-string "vterm %s")
    (vterm-max-scrollback 50000))
#+end_src
** popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :custom
    (popper-group-function #'popper-group-by-directory)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src
* email
** mu4e
* org-mode
** org
 #+begin_src emacs-lisp
   (use-package org
     :straight (:type built-in)
     :init
     (add-hook 'org-mode-hook
               (lambda ()
                 (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
     :custom (org-ellipsis "▼")
     :config
     (setq org-confirm-babel-evaluate nil)
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"))
     :custom-face
     (org-table ((t :foreground "#FFFFFF" )))
     (org-ellipsis ((t :underline nil )))
     )
 #+end_src
** org-ref
#+begin_src emacs-lisp
  (use-package org-ref)
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** org-gcal
#+begin_src emacs-lisp
  (use-package org-gcal)
#+end_src
** ox-reveal
** org-re-reveal
#+begin_src emacs-lisp
  (use-package org-re-reveal
    :config (setq org-re-reveal-root "file:///home/egor/git/reveal.js")
    )
#+end_src
** org-present
#+begin_src emacs-lisp
  (use-package org-present)
#+end_src
** ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src
** org-capture
*** org-capture-templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ("i" "Ideas" entry (file+olp "~/org/notes.org" "Ideas")
           "* %?\nCreated on %U")
          ("n" "Information" entry (file+olp "~/org/notes.org" "Info")
           "* %?\nCreated on %U")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("w" "Work to be done" entry (file+olp "~/org/work.org" "To be done")
           "* %?\nCreated on %U")
          )
        )
#+end_src
** COMMENT org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/org/roam-notes")
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n i" . org-roam-node-insert)
    :config
    (org-roam-setup)
    )
#+end_src
** gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot)
#+end_src
** gnuplot-mode
#+begin_src emacs-lisp
  (use-package gnuplot-mode)
#+end_src
** org-mime
#+begin_src emacs-lisp
  (use-package org-mime)
#+end_src
** wsd-mode
#+begin_src emacs-lisp
  (use-package wsd-mode)
#+end_src
** org-plantuml
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)
   (gnuplot . t)
   ))
(setq org-plantuml-jar-path
      (expand-file-name "~/tools/plantuml.jar"))
#+end_src
* other minor stuff
** pandoc
#+begin_src emacs-lisp
  (use-package pandoc-mode)
#+end_src
** diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (use-package page-break-lines)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src
** languages modes
*** python
    #+begin_src emacs-lisp
      (use-package jedi)
      (use-package lsp-jedi
        :config
        (with-eval-after-load "lsp-mode"
          (setq lsp-disabled-clients '(jedi))
          (setq lsp-enabled-clients '(pylsp pyls jedi clangd))
          )
        :hook
        (python-mode . lsp)
        )
      (use-package cython-mode)
    #+end_src
*** groovy
 #+begin_src emacs-lisp
   (use-package groovy-mode
     )
 #+end_src
*** markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :config
       (setq browse-url-browser-function 'browse-url-chrome)
       )
   #+end_src
**** flymd
   #+begin_src emacs-lisp
   (use-package flymd)
   #+end_src
*** yaml
 #+begin_src emacs-lisp
   (use-package yaml-mode)
 #+end_src
 #+begin_src emacs-lisp
   (use-package yaml-imenu)
 #+end_src
*** dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src
*** ansible
#+begin_src emacs-lisp
  (use-package ansible)
#+end_src
*** asciidoc
#+begin_src emacs-lisp
  (use-package adoc-mode)
#+end_src
*** go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.tpl$"
    )
#+end_src
*** plantuml
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config ;;(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq plantuml-jar-path "~/tools/plantuml.jar"
          plantuml-default-exec-mode 'jar
          plantuml-exec-mode 'jar
          plantuml-server-url '"http://www.plantuml.com"
          )
    )
#+end_src
** modelines
*** doom-mode-line
  #+begin_src emacs-lisp
    (use-package all-the-icons
      :config
      ;; Make sure the icon fonts are good to go
      ;;(set-face-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
      ;;(set-face-font t 'unicode (font-spec :family "file-icons") nil 'append)
      )
  #+end_src
  #+begin_src emacs-lisp
    (use-package doom-modeline
      :config
      (doom-modeline-mode)
      (setq doom-modeline-icon t)
      (setq doom-modeline-height 35)
      (setq doom-modeline-major-mode-color-icon nil))
  #+end_src
** which-key
 #+begin_src emacs-lisp
   (use-package which-key
     :diminish which-key-mode)
 #+end_src
** htmlize
 #+begin_src emacs-lisp
   (use-package htmlize)
 #+end_src
** disaster
 #+begin_src emacs-lisp
   (use-package disaster
     :bind ("C-c d" . disaster)
     )
 #+end_src
** rmsbolt
#+begin_src emacs-lisp
  (use-package rmsbolt
    :custom-face
    (rmsbolt-current-line-face ((t
                                 :inherit hl-line
                                 )))
    )
#+end_src
** dired-rainbow
 #+begin_src emacs-lisp
   (use-package dired-rainbow
     :hook (help-mode . rainbow-mode))
 #+end_src
** rainbow-mode
 #+begin_src emacs-lisp
   (use-package rainbow-mode)
 #+end_src
** command-log-mode
 #+begin_src emacs-lisp
   (use-package command-log-mode
     :init
     (setq command-log-mode-auto-show t))
 #+end_src
** flyspell-correct
   #+begin_src emacs-lisp
     (use-package flyspell-correct
       :after flyspell)
   #+end_src
** google-translate
#+begin_src emacs-lisp
  (use-package google-translate
    :config
    :custom
    (google-translate-default-target-language "ru")
    (google-translate-default-source-language "en")
    (google-translate-backend-method 'curl)
    :bind ("C-c t" . google-translate-at-point)
    )
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
#+end_src
** key-frequency
   Shows frequency of emacs commands
   #+begin_src emacs-lisp
     (use-package keyfreq
       :disabled t
       :init
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1)
       )
   #+end_src
** dimmer
Dimming the face of non-active buffers
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t
    :config
    (setq dimmer-exclusion-regexp "magit-popup-mode")
    )
#+end_src
** docker
#+begin_src emacs-lisp
  (use-package docker)
#+end_src
** markdown-preview-mode
#+begin_src emacs-lisp
  (use-package markdown-preview-mode)
#+end_src
** restart-emacs
#+begin_src emacs-lisp
  (use-package restart-emacs)
#+end_src
** language-detection
#+begin_src emacs-lisp
  (use-package language-detection)
#+end_src
** restclient
#+begin_src emacs-lisp
  (use-package restclient)
#+end_src
** disable-mouse
#+begin_src emacs-lisp
  (use-package disable-mouse
    :config (global-disable-mouse-mode)
    )
#+end_src
** guru-mode
#+begin_src emacs-lisp
  (use-package guru-mode
    )
#+end_src
** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :config (setq cmake-tab-width 4)
    )
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src
** sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src
** oauth2
#+begin_src emacs-lisp
(use-package oauth2)
#+end_src
** csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :config
    (setq csv-separators '(";"))
  )

#+end_src
** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap descrive-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
  )
#+end_src
** selectric-mode
#+begin_src emacs-lisp
  (use-package selectric-mode)
#+end_src
** visual-fill-column
   #+begin_src emacs-lisp
     (use-package visual-fill-column
       :custom
       (visual-fill-column-center-text t)
       (visual-fill-column-width 110)
       :hook
       ((org-mode markdown-mode) . visual-fill-column-mode)
       )
   #+end_src
** stripe-buffer
   #+begin_src emacs-lisp
     (use-package stripe-buffer
       :custom-face
       (stripe-highlight ((t
                         :background "#333333"
                         )))
       )
   #+end_src
** bash-completion
   #+begin_src emacs-lisp
     (use-package bash-completion
       :config
       (bash-completion-setup)
       )
   #+end_src
** latex-preview-pane
    #+begin_src emacs-lisp
      (use-package latex-preview-pane)
    #+end_src
** keykast
#+begin_src emacs-lisp
  (use-package keycast
    :config
    (defun +toggle-keycast()
      (interactive)
      (if (member '("" keycast-mode-line " ") global-mode-string)
          (progn (setq global-mode-string (delete '("" keycast-mode-line " ") global-mode-string))
                 (remove-hook 'pre-command-hook 'keycast--update)
                 (message "Keycast OFF"))
        (add-to-list 'global-mode-string '("" keycast-mode-line " "))
        (add-hook 'pre-command-hook 'keycast--update t)
        (message "Keycast ON"))))
#+end_src
* non-elpa
* tmp
  #+begin_src emacs-lisp
    (setenv "_FASD_DATA" (concat (getenv "HOME") "/.cache/fasd/.fasd"))
  #+end_src

  

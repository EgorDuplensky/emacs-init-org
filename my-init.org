#+STARTIP: My emacs configuration. Synced with Ubuntu through dropbox. =*Edit carefully*=
#+startup: overview
#+creator: Egor Duplensky

* common settings
** Custom variables
#+BEGIN_SRC emacs-lisp
    ;; Save to kill ring before kill
    (setq save-interprogram-paste-before-kill t)
    ;; To avoid initializing twice
    (setq package-enable-at-startup nil)
    ;; to put emacs's autogenerating lisp code into separate file
    (setq custom-file "~/.emacs.d/.emacs-custom.el")
    ;; Treat all custom themes as safe
    (setq custom-safe-themes t)
    ;; Suppress starting emacs message
    (setq inhibit-startup-message 1)
    ;; Top frame: <filename with full path>
    (setq frame-title-format "%b")
    (defvar x-strech-cursor)
    (setq x-strech-cursor 1)
    ;; Copy/paste from another system apps
    (setq x-select-enable-clipboard t)
    ;; scrolling speed
    ;; (setq mouse-wheel-scroll-amount '(2 ((shift) . 2) ((control) . nil)))
    (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Enable/Disable some minor modes
#+BEGIN_SRC emacs-lisp
    ;; Mode line config
    (column-number-mode 1)
    ;; hide default TOOLBAR
    (hide-ifdef-mode 1)
    ;; hightlight brackets
    (show-paren-mode t)
    ;; disable toolbar
    (tool-bar-mode -1)
    ;; hightlight current line
    (global-hl-line-mode 1)
    ;;Displays the current function name in the mode line
    (which-function-mode 1)
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    ;; Cursor color
    ;; (set-cursor-color "red")
    (blink-cursor-mode 0)
    ;; Overwrite selected text
    (delete-selection-mode 1)
#+END_SRC
** Scrolling without moving point
 Useful feature but not sure about bindings yet
 #+BEGIN_SRC emacs-lisp
   (defun gcm-scroll-down ()
     (interactive)
     (scroll-up 1))
   (defun gcm-scroll-up ()
     (interactive)
     (scroll-down 1))
   ;; (global-set-key (kbd "M-p") 'gcm-scroll-up)
   ;; (global-set-key (kbd "M-n") 'gcm-scroll-down)
 #+END_SRC
** Disable alarm bell for "C-g"
 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 
         (lambda ()
           (unless (memq this-command
                         '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
             (ding))))
 #+END_SRC
** y-or-n-p
#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Do not need backup and autosave files
#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# file
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-<right>") 'forward-word)
    (global-set-key (kbd "C-<left>") 'backward-word)
    (global-set-key "\M-g" 'goto-line)
    (global-set-key "\C-c\C-c" 'compile)
    (global-set-key "\C-c\C-k" 'indent-for-comment)
    (global-set-key "\C-c\C-l" 'indent-new-comment-line)
    (global-set-key "\C-c\C-s" 'kill-compilation)
    (global-set-key "\C-c\M-b" 'emu-backend-find)
    (global-set-key [(shift f1)] 'next-error)
    (define-key global-map [f1] '(lambda ()  (interactive) (switch-to-buffer "*ansi-term*") (delete-other-windows)))
    (define-key global-map [f2] 'next-error)
    (define-key global-map [f3] 'previous-error)
    (define-key global-map [f5]  'revert-buffer)
    (define-key global-map [f6]  'ivy-resume)
    (define-key global-map [f7]  'repeat-complex-command)
    (define-key global-map [f9]  'manual-entry)     ;; man <command>
    (define-key global-map [f11]'grep)
    (define-key global-map [f27]'beginning-of-buffer)
    (define-key global-map [f29]'scroll-down)
    (define-key global-map [f33]'end-of-buffer)
    (define-key global-map [f35]'scroll-up)
    (global-unset-key [home])
    (global-unset-key [end])
    (define-key function-key-map [home] 'beginning-of-buffer)
    (define-key function-key-map [end] 'end-of-buffer)
#+END_SRC
** linum-mode configuration
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%d ")
  ;; enable linum-mode for all the buffers except some specific ones
  (define-global-minor-mode my-global-linum-mode linum-mode
    (lambda ()
      (when (not (memq major-mode
                       (list 'term-mode
                             'treemacs-mode
                             'minibuffer-inactive-mode
                             'ibuffer-mode
                             'magit-status-mode
                             'magit-popup-mode
                             )))
        (linum-mode))))

  (my-global-linum-mode 1)
#+END_SRC
** comment / comment out
#+BEGIN_SRC emacs-lisp
  ;; Comment/uncomment current line
  (defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))
  (global-set-key (kbd "C-c C-v") 'comment-or-uncomment-region-or-line)
#+END_SRC
** Other
 #+BEGIN_SRC emacs-lisp
   (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
 #+END_SRC
* editing stuff
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    )
#+END_SRC
** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete-mode
    :config (global-hungry-delete-mode))
#+END_SRC
** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
      (add-hook 'css-mode-hook #'aggressive-indent-mode)
      (add-hook 'c-mode-hook #'aggressive-indent-mode)
      (add-hook 'c++-mode-hook #'aggressive-indent-mode)
      (add-hook 'css-mode-hook #'aggressive-indent-mode)
      (add-hook 'shell-script-mode #'aggressive-indent-mode)
      )
    )
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init
    ;; disable M-q "fill paragraph"
    (defun my-expand-region-bind-hook()
      (local-unset-key (kbd "M-q"))
      )
    (add-hook 'c-mode-hook 'my-expand-region-bind-hook)
    (add-hook 'c++-mode-hook 'my-expand-region-bind-hook)
    :config
    ;; expand region seems to be not working properly with this mode enabled
    (setq shift-select-mode nil)
    :bind
    ("M-q" . er/expand-region)
    )
#+END_SRC
** smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :config (smartparens-global-mode t))
   #+end_src
** iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
** visual-regexp
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind
    (("C-c r" . vr/replace)
     ("C-c q" . vr/query-replace)
     ("C-c m" . vr/mc-mark)
     )
    )
#+END_SRC
** ialign
#+begin_src emacs-lisp
  (use-package ialign
    :ensure t)
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :config
    (setq wgrep-enable-key "r"))
#+end_src
** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :init
    (move-text-default-bindings)
    )
#+END_SRC
* emacs navigation
** ag
#+begin_src emacs-lisp
  (use-package ag
    :ensure t)
#+end_src
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :custom-face
    (ivy-current-match ((t
                         :background "#000000"
                         :underline nil
                         :foreground "#FFFFFF"
                         )))
    :config
    (setq ivy-format-function 'ivy-format-function-arrow)
    )
#+END_SRC
*** ivy-rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after (ivy swiper)
    :init (setq ivy-rich-path-style 'abbrev
                ivy-virtual-abbreviate 'full)
    :hook (ivy-mode . ivy-rich-mode)
    )
#+END_SRC
** smex
  Needed for nicer counsel
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    )
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)
     )
    :config (counsel-mode 1)
    )
#+END_SRC
** counsel-projectile
Use ivy for projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode)
    )
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    (("C-x M-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-x"  . counsel-M-x)
     ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode    1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      )
    )
#+END_SRC
** ibuffer
*** ibuffer-vc
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)	;
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("magit" (name . "^magit.*$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode) (mode . shell-script-mode)))
                 ("c/c++" (or
                           (mode . c++-mode)
                           (mode . c-mode)))
                 ("tcl" (or
                         (mode . tcl-mode)
                         ))
                 ("log-files" (name . "^\\.log$|messages[.]?[1-9]*$"))
                 ;; ("log-files" (name . "^\\.log$"))
                 ("cnf-files" (name . "^\\.cnf$"))
                 ("xml-files" (name . "^\\.xml$"))
                 ("other-languages" (or
                                     (mode . java-mode)
                                     (mode . python-mode)
                                     (mode . groovy-mode)
                                     ))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ("gdb" (or (mode . gdb-threads-mode) (mode . gud-mode) (mode . gdb-locals-mode) (mode . gdb-inferior-io-mode)))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

              ;; Use human readable Size column instead of original one
              (define-ibuffer-column size-h
                (:name "Size" :inline t)
                (cond
                 ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
                 ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
                 (t (format "%8d" (buffer-size)))))

  ;; Explicitly require ibuffer-vc to get its column definitions, which
  ;; can't be autoloaded
  (require 'ibuffer-vc)

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
  ;; Use more human readable 'ls' options
  (setq dired-listing-switches "-lahF --group-directories-first")
#+END_SRC
** smooth-scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1))
#+end_src
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] 'ace-window)
    (setq aw-background nil)
    :custom-face
    (aw-leading-char-face ((t :inherit ace-jump-face-foreground :height 3.0)))
    )
#+END_SRC
** browse-kill-ring
An alternative of counsel-yank-pop
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :init
    (defface my-browse-kill-ring-separator-face
      '((t :foreground "#276E9E"
           :weight bold
           ))
      "Face for browse-kill-ring-separator."
      )
    :config
    (setq browse-kill-ring-highlight-current-entry t)
    (setq browse-kill-ring-separator "-------------------------------------------")
    (setq browse-kill-ring-separator-face 'my-browse-kill-ring-separator-face)
    :bind ("M-y" . browse-kill-ring))
#+END_SRC
** isearch
Enable possibility to exit isearch with leaving cursor
at the beginning of the word (C-Ret)  
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map [(control return)]
  #'isearch-exit-other-end)
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))
#+END_SRC
** ace-isearch
#+BEGIN_SRC emacs-lisp
  (use-package ace-isearch
    :ensure t)
#+END_SRC
* code navigation
** xcscope
 #+BEGIN_SRC emacs-lisp
   (use-package xcscope
     :ensure t
     :init
     (cscope-setup))
 #+END_SRC
** ggtags
 #+BEGIN_SRC emacs-lisp
   (use-package ggtags
     :ensure t
     :hook ((c-mode c++-mode) . ggtags-mode)
     :config (setq ggtags-sort-by-nearness t)
     )
 #+END_SRC
** call-graph
#+BEGIN_SRC emacs-lisp
  (use-package call-graph
    :ensure t
    :config (setq cg-path-to-global "/usr/local/bin/"))
#+END_SRC
* coding facilities
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (use-package flycheck-irony
      :ensure t
      :init
      (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)
      )
    (setq-default flycheck-temp-prefix ".")
    (setq-default temporary-file-directory "~/.emacs-tmp-dir")
    )
#+END_SRC
*** flycheck-pos-tip
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
    :ensure pos-tip
    :config
    (flycheck-pos-tip-mode)
    )
#+END_SRC
*** flycheck-popup-tip
#+BEGIN_SRC emacs-lisp
(use-package flycheck-popup-tip
    :ensure t
    :config (eval-after-load 'flycheck
              (if (display-graphic-p)
                  (flycheck-pos-tip-mode)
                (flycheck-popup-tip-mode))))
#+END_SRC
# *** work-settings
# #+include: "~/.emacs.d/work-specific-settings.el" src emacs-lisp
# ##+INCLUDE: "~/.emacs.d/work-specific-settings.org"
** autocomplete
#+BEGIN_SRC emacs-lisp
  ;; load POPUP first
  (use-package popup
    :ensure t
    )
  (use-package auto-complete
    :disabled t
    :ensure t
    :config
    (ac-config-default)
    :init
    (setq ac-modes '(sh-mode emacs-lisp-mode lisp-mode lisp-interaction-mode python-mode))
    )
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :defer t
    :init
    (defun company-term-hook ()
      (company-mode -1)
      )
    (progn
      (add-hook 'term-mode-hook 'company-term-hook)
      (add-hook 'after-init-hook 'global-company-mode)
      )
    :config
    (use-package company-irony
      :ensure t
      :defer t
      :init
      (add-to-list 'company-backends 'company-irony))
    (use-package company-shell :ensure t
      :init
      (add-to-list 'company-backends '(company-shell company-shell-env company-fish-shell)))
    (use-package company-quickhelp :ensure t
      :config
      (company-quickhelp-mode 1)
      (setq company-quickhelp-delay 1)
      :bind ("\C-c h" . #'company-quickhelp-manual-begin))
    (use-package company-ansible
      :ensure t)
    (setq company-idle-delay              0
          company-minimum-prefix-length   2
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil
          )

    :bind ("\C-q" . company-complete-common)
    )
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"                 ;; personal snippets
            ))
    (yas-global-mode 1)
    )
#+END_SRC
*** yasnippet-snippets
# official collection of snippets
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
  #+END_SRC
** irony
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :init
    :hook ((c++-mode c-mode objc-mode) . irony-mode)
    :config
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    )
#+END_SRC
** hide-if-def
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'hide-ifdef-mode)
#+END_SRC
** hideshow-org
#+begin_src emacs-lisp
  (use-package hideshow-org
    :ensure t
    :bind ("C-t" . hs-toggle-hiding))
#+end_src
** tabs and indentations
#+BEGIN_SRC emacs-lisp
;;(customize-variable (quote tab-stop-list))
(setq c-default-style "bsd"
      c-basic-offset 4)
(custom-set-variables
 '(tab-stop-list (number-sequence 4 120 4)))
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
;; don't indent "case" branch in "switch" according to coding style
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-offset 'case-label '0)))
#+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t)
#+END_SRC
** quickhelp
#+begin_src emacs-lisp
  (use-package quickrun
    :ensure t)
#+end_src
** git-messenger
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :ensure t
    :config
    (setq git-messenger:use-magit-popup t))
#+END_SRC
* project/git stuff
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (use-package treemacs-evil
        :ensure t
        :demand t)
      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]         . treemacs)
          ("M-0"        . treemacs-select-window)
          ("C-c 1"      . treemacs-delete-other-windows)
          )
    )

  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    )

  (use-package with-editor
    :ensure t
    )

  (require 'with-editor)
  (require 'magit)

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 "~/.emacs.d/plugins/magit/Documentation/"))
#+END_SRC
** gitignore-mode
#+begin_src emacs-lisp
(use-package gitignore-mode
             :ensure t
             )
#+end_src
** gitconfig-mode
#+begin_src emacs-lisp
(use-package gitconfig-mode
             :ensure t
             )
#+end_src
* ansi-term
Some old settings related to running emacs
in terminal mode. Most likely can be removed.
#+BEGIN_SRC emacs-lisp
  (defun fix-performance-bug ()
    (setq bidi-paragraph-direction 'left-to-right))
  (add-hook 'term-mode-hook 'fix-performance-bug)
#+END_SRC
* org-mode
** org
 #+BEGIN_SRC emacs-lisp
   (use-package org
     :ensure t
     :init
     (add-hook 'org-mode-hook
               (lambda ()
                 ;; (org-set-local 'yas/trigger-key [tab])
                 (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
     :hook (org-mode . flyspell-mode)
     )
 #+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-ref
    :ensure t)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** ox-reveal
#+BEGIN_SRC emacs-lisp
  ;; for the presentations
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "file:///home/xegodup/github/reveal.js"))

  (use-package org-jira
    :disabled t
    :ensure t)
 #+END_SRC
** ox-pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t)
#+END_SRC
** org-capture
*** org-capture-templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("s" "Should try for emacs" entry (file+olp "/home/xegodup/Dropbox/org/orgzly/Emacs.org" "Should try")
           "* TODO %?\n  %i\n  %T")
          ("m" "Modes" entry (file+olp "/home/xegodup/Dropbox/org/orgzly/Emacs.org" "Modes to be checked out")
           "* TODO %?\n  %i\n  %T")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src
** gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t)
#+END_SRC
** gnuplot-mode
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC

* other minor stuff
** pandoc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pandoc-mode
    :ensure t)
#+END_SRC
** diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (use-package page-break-lines
      :ensure t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-startup-banner "~/.emacs.d/misc/images/emacs_icon.png")
    (dashboard-setup-startup-hook))
#+end_src
** languages modes
*** groovy
 #+BEGIN_SRC emacs-lisp
   (use-package groovy-mode
     :ensure t
     )
 #+END_SRC
*** markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :config
       (defun my-flymd-browser-function (url)
         (let ((browse-url-browser-function 'browse-url-firefox))
           (browse-url url)))
       (setq flymd-browser-open-function 'my-flymd-browser-function)
       )
   #+END_SRC
**** flymd
   #+BEGIN_SRC emacs-lisp
   (use-package flymd
   :ensure t)
   #+END_SRC
*** yaml
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
                :ensure t
                )
 #+END_SRC
*** dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
*** ansible
#+BEGIN_SRC emacs-lisp
  (use-package ansible
    :ensure t)
#+END_SRC
*** asciidoc
#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :ensure t)
#+END_SRC
** modelines
*** smart-mode-line
  #+BEGIN_SRC emacs-lisp
    (use-package smart-mode-line
      :ensure t
      :config
      (sml/setup)
      (setq sml/no-confirm-load-theme t)
      )

    (let ((which-func '(which-func-mode ("" which-func-format " "))))
      (setq-default mode-line-format (remove which-func mode-line-format))
      (setq-default mode-line-misc-info (remove which-func mode-line-misc-info))
      (setq cell (last mode-line-format 7))
      (setcdr cell
              (cons which-func
                    (cdr cell))))
  #+END_SRC
*** doom-mode-line
 #+begin_src emacs-lisp
   (use-package doom-modeline
     :disabled t
     :ensure t
     :defer t
     :hook (after-init . doom-modeline-init))
 #+end_src
*** powerline
  #+BEGIN_SRC emacs-lisp
    (use-package powerline
      :disabled t
      :ensure t
      :config
      (setq powerline-arrow-shape 'curve)
      (set-face-attribute 'mode-line nil
                          :foreground "Black"
                          :background "DarkOrange"
                          :box nil)
      )
  #+END_SRC
*** spaceline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :disabled t
      :ensure t
      :init
      (require 'spaceline-config)
      (set-face-attribute 'mode-line nil :box nil)
      (setq powerline-default-separator 'wave)
      (spaceline-emacs-theme)
      )

    (use-package spaceline-config
      ;; :ensure spaceline
      :disabled t
      :config
      (spaceline-helm-mode 1)
      (spaceline-install
        'main
        '((buffer-modified :tight-right t)
          ((remote-host :tight-right t buffer-id :tight-right t) :face font-lock-keyword-face :tight-right t)
          (line-column :face font-lock-preprocessor-face)
          (which-function :face font-lock-function-name-face)
          (version-control :when active :face font-lock-keyword-face)
          (process :when active))
        '((selection-info :face region :when mark-active)
          ((flycheck-error flycheck-warning flycheck-info) :when active)
          (global :when active)
          (major-mode :face error)))
      )
  #+END_SRC
** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode
     :config (which-key-mode))
 #+END_SRC
** midnight
 #+BEGIN_SRC emacs-lisp
 ;; All the buffers that haven’t been visited in 3 days will be killed
 (require 'midnight)
 (midnight-delay-set 'midnight-delay "4:30am")
 #+END_SRC
** htmlize
 #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :ensure t
     )
 #+END_SRC
** disaster
 #+BEGIN_SRC emacs-lisp
   (use-package disaster
     :ensure t
     :bind ("C-c d" . disaster)
     )
 #+END_SRC
** dired-rainbow
 #+BEGIN_SRC emacs-lisp
   (use-package dired-rainbow
     :ensure t
     :hook (help-mode . rainbow-mode))
 #+END_SRC
** rainbow-mode
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t)
 #+END_SRC
** command-log-mode
 #+BEGIN_SRC emacs-lisp
   (use-package command-log-mode
     :ensure t
     :init
     (setq command-log-mode-auto-show t))
 #+END_SRC
** cheat-sheet
 #+begin_src emacs-lisp
   (use-package cheatsheet
     :ensure t)
 #+end_src
*** marking
#+begin_src emacs-lisp
  (cheatsheet-add-group 'Marking
                        '(:key "C-SPC C-SPC" :description "Set mark at the point.")
                        '(:key "C-x C-x" :description "Go back to the mark.")
                        '(:key "C-u C-SPC" :description "Cycle through the mark ring of the current buffer.")
                        '(:key "C-x C-SPC" :description "Cycle through the global mark ring.")
                        '(:key "counseal-mark-ring" :description "Interactive cycle through the mark ring of the current buffer."))
#+end_src
** flyspell-settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC
** flyspell-correct
*** flyspell-correct-ivy
 #+begin_src emacs-lisp
   (use-package flyspell-correct-ivy
     :ensure t)
 #+end_src
*** flyspell-correct-popup
 #+begin_src emacs-lisp
   (use-package flyspell-correct-popup
     :disabled t
     :ensure t
     :bind ("C-;" . flyspell-correct-previous-word-generic))
 #+end_src
** google-translate
#+begin_src emacs-lisp
  (use-package google-translate
    :ensure t
    :config
    (setq google-translate-default-target-language "ru"))
#+end_src
** key-frequency
# shows frequency of emacs commands
#+begin_src emacs-lisp
  (use-package keyfreq
    :ensure t
    :init
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1)
    )
#+end_src
** speed-type
#+begin_src emacs-lisp
  (use-package speed-type
    :ensure t)
#+end_src
** dimmer
# dimming the face of non-active buffers
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :config
    (dimmer-mode))
#+end_src
** kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :ensure t)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t)
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :init (load-theme 'zenburn t))
  (set-face-background 'show-paren-match "sea green")
  (set-face-background 'show-paren-mismatch "orange red")
  (set-face-foreground 'which-func "#93E0E3")
  (set-face-background 'hl-line "gray5")
  (set-face-foreground 'highlight nil)
  (put 'downcase-region 'disabled nil)

  ;; hightlight function calls (they have default color otherwise)
  (defvar font-lock-function-call-face
    'font-lock-function-call-face
    "Face name to use for format specifiers.")

  (defface font-lock-function-call-face
    '((t . (:foreground "orangered" :bold t)))
    "Face to display method calls in.")

  (font-lock-add-keywords
   'c-mode
   '(("\\(\\w+\\)\\s-*\("
      (1 font-lock-function-call-face)))
   t)

  ;; change 'select region' faces
  (set-face-attribute 'region nil :background "#276E9E")
  (set-face-attribute 'region nil :foreground "#FFFFFF")
  ;; also highlight underlying entities in documentation
  (set-face-attribute 'button nil :foreground "#7F9F7F")
#+END_SRC
* non-elpa
Current kubernetes in mode-line
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/non-elpa/emacs-kubectx-mode-line")
(require 'kubectx)
(kubectx-mode 1)
#+END_SRC

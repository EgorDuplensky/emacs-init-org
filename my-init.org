* ORG-HEADER
#+TITLE: Emacs configuration in form of org file
#+STARTIP: My emacs configuration. Synced with Ubuntu through dropbox. =*Edit carefully*=
#+startup: overview
#+creator: Egor Duplensky
#+OPTIONS: toc:2
* common settings
** gnu-elpa-keyring-update
#+begin_src emacs-lisp
;;  (use-package gnu-elpa-keyring-update
;;    :ensure t)
#+end_src
** Always ask before quit
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Custom variables
#+BEGIN_SRC emacs-lisp
    ;; Save to kill ring before kill
    (setq save-interprogram-paste-before-kill t)
    ;; To avoid initializing twice
    (setq package-enable-at-startup nil)
    ;; to put emacs's autogenerating lisp code into separate file
    (setq custom-file "~/.emacs.d/.emacs-custom.el")
    ;; Treat all custom themes as safe
    (setq custom-safe-themes t)
    ;; Suppress starting emacs message
    (setq inhibit-startup-message 1)
    ;; Top frame: <filename with full path>
    (setq frame-title-format "%b")
    (defvar x-strech-cursor)
    (setq x-strech-cursor 1)
    ;; Copy/paste from another system apps
    (setq x-select-enable-clipboard t)
    ;; scrolling speed
    ;; (setq mouse-wheel-scroll-amount '(2 ((shift) . 2) ((control) . nil)))
    (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Enable/Disable some minor modes
#+BEGIN_SRC emacs-lisp
  ;; Mode line config
  (column-number-mode 1)
  ;; hide default TOOLBAR
  (hide-ifdef-mode 1)
  ;; hightlight brackets
  (show-paren-mode t)
  ;; disable toolbar
  (tool-bar-mode -1)
  ;; hightlight current line
  (global-hl-line-mode 1)
  ;;Displays the current function name in the mode line
  (which-function-mode 1)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
  ;; Cursor color
  ;; (set-cursor-color "red")
  (blink-cursor-mode 0)
  ;; Overwrite selected text
  (delete-selection-mode 1)
  (set-fringe-mode '(8 . 0))
#+END_SRC
** Scrolling without moving point
 Useful feature but not sure about bindings yet
 #+BEGIN_SRC emacs-lisp
   (defun gcm-scroll-down ()
     (interactive)
     (scroll-up 1)
     (next-line)
   )
   (defun gcm-scroll-up ()
     (interactive)
     (scroll-down 1)
     (previous-line))
   (global-set-key (kbd "M-p") 'gcm-scroll-up)
   (global-set-key (kbd "M-n") 'gcm-scroll-down)
 #+END_SRC
** Disable alarm bell for "C-g"
 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
 #+END_SRC
** y-or-n-p
#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Do not need backup and autosave files
#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# file
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<right>") 'forward-word)
  (global-set-key (kbd "C-<left>") 'backward-word)
  (global-set-key (kbd "C-S-<down>") 'term-send-raw)
  (global-set-key "\M-g" 'goto-line)
  (global-set-key "\C-c\C-c" 'compile)
  (global-set-key "\C-c\C-k" 'indent-for-comment)
  (global-set-key "\C-c\C-l" 'indent-new-comment-line)
  (global-set-key "\C-c\C-s" 'kill-compilation)
  (global-set-key "\C-c\M-b" 'emu-backend-find)
  (global-set-key [(shift f1)] 'next-error)
  (global-set-key (kbd "<return>") 'ignore)
  (define-key global-map [f1] 'next-error)
  (define-key global-map [f2] 'previous-error)
  (define-key global-map [f3] 'previous-error)
  (define-key global-map [f5]  'revert-buffer)
  (define-key global-map [f6]  'ivy-resume)
  (define-key global-map [f7]  'repeat-complex-command)
  (define-key global-map [f9]  'manual-entry)     ;; man <command>
  (define-key global-map [f11]'grep)
  (define-key global-map [f27]'beginning-of-buffer)
  (define-key global-map [f29]'scroll-down)
  (define-key global-map [f33]'end-of-buffer)
  (define-key global-map [f35]'scroll-up)
  (global-unset-key [home])
  (global-unset-key [end])
  (define-key function-key-map [home] 'beginning-of-buffer)
  (define-key function-key-map [end] 'end-of-buffer)
#+END_SRC
** line numbers configuration
#+BEGIN_SRC emacs-lisp
  ;; (global-display-line-numbers-mode)
#+END_SRC
** comment / comment out
#+BEGIN_SRC emacs-lisp
  ;; Comment/uncomment current line
  (defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))
  (global-set-key (kbd "C-c C-v") 'comment-or-uncomment-region-or-line)
#+END_SRC
** ansi-term
Some old settings related to running emacs
in terminal mode. Most likely can be removed.
#+BEGIN_SRC emacs-lisp
  (defun fix-performance-bug ()
    (setq bidi-paragraph-direction 'left-to-right))
  (add-hook 'term-mode-hook 'fix-performance-bug)
#+END_SRC 
** ediff
Make vertical split by default
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** auto-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Makefile\\..+" . makefile-mode))
  (add-to-list 'auto-mode-alist '("Dockerfile.+" . dockerfile-mode))
  (add-to-list 'auto-mode-alist '("\\.*bashrc" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.profile" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.xinitrc" . shell-script-mode))
#+END_SRC
** browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")
#+end_src
** autosave bookmarks
#+begin_src emacs-lisp
  (setq bookmark-save-flag t)
#+end_src
** file path to clipboard
Useful when you need to enter file's location in terminal
#+begin_src emacs-lisp
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

#+end_src
** kill all buffers except current one
#+begin_src emacs-lisp
(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
** always truncate line by default
Otherwise it can slow down emacs by a lot
#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src
** Other
 #+BEGIN_SRC emacs-lisp
   (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
 #+END_SRC
* editing stuff
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    )
#+END_SRC
** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete-mode
    :config (global-hungry-delete-mode))
#+END_SRC
** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :after (org)
    :init
    ;; disable M-q "fill paragraph"
    (defun my-expand-region-bind-hook()
      (local-unset-key (kbd "M-q"))
      )
    (add-hook 'c-mode-hook 'my-expand-region-bind-hook)
    (add-hook 'c++-mode-hook 'my-expand-region-bind-hook)
    :config
    ;; expand region seems to be not working properly with this mode enabled
    (setq shift-select-mode nil)
    :bind
    ("M-q" . er/expand-region)
    )
#+END_SRC
** smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :config (smartparens-global-mode t)
       :custom (sp-escape-quotes-after-insert nil)
       :hook (minibuffer-setup . smartparens-mode)
       )
   #+end_src
** iedit
#+BEGIN_SRC emacs-lisp
  (defun iedit-current-func-mode()
    (interactive)
    (if (bound-and-true-p iedit-mode)
        (iedit-mode)
      (iedit-mode-toggle-on-function)
      )
    )

  (use-package iedit
    :ensure t
    :bind
    ("C-;" . iedit-current-func-mode)
    ("C-:" . iedit-mode)
    )

#+END_SRC
** visual-regexp
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind
    (("C-c r" . vr/replace)
     ("C-c q" . vr/query-replace)
     ("C-c m" . vr/mc-mark)
     )
    )
#+END_SRC
** ialign
#+begin_src emacs-lisp
  (use-package ialign
    :ensure t)
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :config
    (setq wgrep-enable-key "r"))
#+end_src
** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :init
    (move-text-default-bindings)
    )
#+END_SRC
** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src
* emacs navigation
** ag
#+begin_src emacs-lisp
  (use-package ag
    :ensure t)
#+end_src
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind
    (("C-c C-r" . ivy-resume)
     ("M-x"  . counsel-M-x)
     ("C-x C-f" . counsel-find-file))
    :custom-face
    (ivy-current-match ((t
                         :background "#000000"
                         :underline nil
                         :foreground "#FFFFFF"
                         )))
    :config
    (setq ivy-format-function 'ivy-format-function-arrow)
    (progn
      (ivy-mode    1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      )
    )
#+END_SRC
*** ivy-rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after magit
    :init (setq ivy-rich-path-style 'abbrev
                ivy-virtual-abbreviate 'full)
    :config
    (ivy-rich-mode 1)
    :custom
    (ivy-rich-parse-remote-buffer nil)
    )
#+END_SRC
*** ivy-posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :ensure t
    :custom-face
    (ivy-posframe-border ((t (:background "#e6e1dc"))))
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-border-width 1)
    (setq ivy-posframe-parameters '((alpha . 85)))
    (ivy-posframe-mode 1)
    )
#+end_src
** smex
  Needed for nicer counsel
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    )
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (
    ("C-x C-M-f" . counsel-fzf)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)
     )

    :config (counsel-mode 1)
    )
#+END_SRC
** counsel-projectile
Use ivy for projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode)
    )
#+END_SRC
** counsel-tramp
#+BEGIN_SRC emacs-lisp
  (use-package counsel-tramp
    :ensure t)
#+END_SRC
** ibuffer
*** ibuffer-vc
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)	;
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("magit" (name . "^magit.*$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode) (mode . shell-script-mode)))
                 ("c/c++" (or
                           (mode . c++-mode)
                           (mode . c-mode)))
                 ("tcl" (or
                         (mode . tcl-mode)
                         ))
                 ("log-files" (name . "^\\.log$|messages[.]?[1-9]*$"))
                 ;; ("log-files" (name . "^\\.log$"))
                 ("cnf-files" (name . "^\\.cnf$"))
                 ("xml-files" (name . "^\\.xml$"))
                 ("other-languages" (or
                                     (mode . java-mode)
                                     (mode . python-mode)
                                     (mode . groovy-mode)
                                     ))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ("gdb" (or (mode . gdb-threads-mode) (mode . gud-mode) (mode . gdb-locals-mode) (mode . gdb-inferior-io-mode)))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

              ;; Use human readable Size column instead of original one
              (define-ibuffer-column size-h
                (:name "Size" :inline t)
                (cond
                 ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
                 ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
                 (t (format "%8d" (buffer-size)))))

  ;; Explicitly require ibuffer-vc to get its column definitions, which
  ;; can't be autoloaded
  (require 'ibuffer-vc)

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
  ;; Use more human readable 'ls' options
  (setq dired-listing-switches "-lahF --group-directories-first")
#+END_SRC
*** ibuffer-tramp
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-tramp
    :ensure t)
#+END_SRC
** smooth-scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    :bind
    ("C-v". scroll-up-line)
    ("M-v". scroll-down-line)
    :custom
    (smooth-scroll-margin 20)
    )
#+end_src
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] 'ace-window)
    (setq aw-background nil)
    :custom-face
    (aw-leading-char-face ((t :inherit ace-jump-face-foreground :height 3.0)))
    )
#+END_SRC
** browse-kill-ring
An alternative of counsel-yank-pop
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :init
    (defface my-browse-kill-ring-separator-face
      '((t :foreground "#276E9E"
           :weight bold
           ))
      "Face for browse-kill-ring-separator."
      )
    :config
    (setq browse-kill-ring-highlight-current-entry t)
    (setq browse-kill-ring-separator "-------------------------------------------")
    (setq browse-kill-ring-separator-face 'my-browse-kill-ring-separator-face)
    :bind ("M-y" . browse-kill-ring))
#+END_SRC
** isearch
Enable possibility to exit isearch with leaving cursor
at the beginning of the word (C-Ret)  
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map [(control return)]
  #'isearch-exit-other-end)
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))
#+END_SRC
** ace-isearch
#+BEGIN_SRC emacs-lisp
  (use-package ace-isearch
    :ensure t)
#+END_SRC
** centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :init
    (setq centaur-tabs-set-icons t
          centaur-tabs-set-close-button nil
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "●"
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-bar 'over
          centaur-tabs-style "wave")
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-change-fonts "Terminus" 100)
    :custom-face
    (tab-line ((t (:background "#2B2B2B"))))
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src
** rg
#+begin_src emacs-lisp
  (use-package rg
    :ensure t
    :config (rg-enable-default-bindings))
#+end_src
* code navigation
** xcscope
 #+BEGIN_SRC emacs-lisp
   (use-package xcscope
     :ensure t
     :init
     (cscope-setup))
 #+END_SRC
** ggtags
 #+BEGIN_SRC emacs-lisp
   (use-package ggtags
     :ensure t
     :hook ((c-mode c++-mode) . ggtags-mode)
     :config (setq ggtags-sort-by-nearness t)
     )
 #+END_SRC
** call-graph
Breaks emacs after update. Disabled for now.
#+BEGIN_SRC emacs-lisp
  (use-package call-graph
    :disabled t
    :ensure t
    :config (setq cg-path-to-global "/usr/local/bin/"))
#+END_SRC
* coding facilities
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (use-package flycheck-irony
      :ensure t
      :init
      (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)
      )

    (setq-default temporary-file-directory "~/.cache/emacs")
    (unless (file-exists-p temporary-file-directory)
      (make-directory temporary-file-directory))

    (setq-default flycheck-disabled-checkers '(irony))
    )
#+END_SRC
*** flycheck-posframe
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
    :ensure t
    :after flycheck
    :hook (flycheck-mode-hook . flycheck-pos-tip-mode)
    )
#+END_SRC
** autocomplete
#+BEGIN_SRC emacs-lisp
  ;; load POPUP first
  (use-package popup
    :ensure t
    )
  (use-package auto-complete
    :disabled t
    :ensure t
    :config
    (ac-config-default)
    :init
    (setq ac-modes '(sh-mode emacs-lisp-mode lisp-mode lisp-interaction-mode python-mode))
    )
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :defer t
    :init
    (defun company-term-hook ()
      (company-mode -1)
      )
    (progn
      (add-hook 'term-mode-hook 'company-term-hook)
      (add-hook 'after-init-hook 'global-company-mode)
      )
    :bind (:map company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous))
    :config
    (setq company-require-match t)
    (use-package company-ctags
      :ensure t)
    (use-package company-irony
      :ensure t
      :defer t
      :init
      (add-to-list 'company-backends 'company-irony)
      :custom
      (flycheck-clang-standart-library "libstdc++")
      (flycheck-clang-language-standard "c++17")
      )
    (use-package company-shell :ensure t
      :init
      (add-hook 'c-mode-hook
                '(lambda ()
                   (set (make-local-variable 'company-backends)
                        '((company-irony company-clang)))))
      (add-hook 'c++-mode-hook
                '(lambda ()
                   (set (make-local-variable 'company-backends)
                        '((company-irony company-clang)))))
      (add-hook 'sh-mode-hook
                '(lambda ()
                   (set (make-local-variable 'company-backends)
                        '((company-capf company-shell company-shell-env company-fish-shell)))))
      )

    (use-package company-quickhelp :ensure t
      :config
      (company-quickhelp-mode 1)
      (setq company-quickhelp-delay 1)
      :bind ("\C-c h" . #'company-quickhelp-manual-begin))
    (use-package company-ansible
      :ensure t)
    (use-package company-emoji
      :ensure t)
    (setq company-idle-delay              3
          company-minimum-prefix-length   0
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil
          )

    :bind ("\C-q" . company-complete-common)
    )

#+END_SRC
** yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :requires yasnippet
    :ensure t)
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    )
  #+END_SRC
*** ivy-yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package ivy-yasnippet
    :requires yasnippet
    :ensure t)
  #+END_SRC
** irony
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :init
    :hook ((c++-mode c-mode objc-mode) . irony-mode)
    :config
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    )
#+END_SRC
** cpp-auto-include
#+begin_src emacs-lisp
  (use-package cpp-auto-include
    :ensure t)
#+end_src
** hide-if-def
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'hide-ifdef-mode)
#+END_SRC
** hideshow-org
#+begin_src emacs-lisp
  (use-package hideshow-org
    :ensure t
    :bind ("C-t" . hs-toggle-hiding))
#+end_src
** tabs and indentations
#+BEGIN_SRC emacs-lisp
;;(customize-variable (quote tab-stop-list))
(setq c-default-style "bsd"
      c-basic-offset 4)
(custom-set-variables
 '(tab-stop-list (number-sequence 4 120 4)))
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
;; don't indent "case" branch in "switch" according to coding style
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-offset 'case-label '0)))
#+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t)
#+END_SRC
** quickrun
#+begin_src emacs-lisp
  (use-package quickrun
    :ensure t)
#+end_src
** git-messenger
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :ensure t
    :config
    (setq git-messenger:use-magit-popup t))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    )
#+END_SRC
** clang-format
   #+begin_src emacs-lisp
     (use-package clang-format
       :ensure t)
   #+end_src
* project/git stuff
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode -1)
    (setq projectile-completion-system 'ivy)
    )
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]         . treemacs)
          ("M-0"        . treemacs-select-window)
          ("C-c 1"      . treemacs-delete-other-windows)
          )
    )

  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
           :map magit-file-section-map
           ("RET" . magit-diff-visit-file-other-window)
           :map magit-hunk-section-map
           ("RET" . magit-diff-visit-file-other-window))
    :hook
    (ediff-mode . ediff-mode-face-config-hook)
    :config
    (setq transient-display-buffer-action '(display-buffer-below-selected))
    (setq magit-ediff-dwim-show-on-hunks t)
    (setq ediff-make-buffers-readonly-at-startup t)
    (defun ediff-mode-face-config-hook ()
      (set-face-attribute 'ediff-even-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-even-diff-B nil :inherit 'magit-diff-added)
      (set-face-attribute 'ediff-odd-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-odd-diff-B nil :inherit 'magit-diff-added))
    ;; (defun counsel-magit-checkout ()
    ;;   "Forward to `describe-function'."
    ;;   (interactive)
    ;;   (ivy-read "Switch to branch: "
    ;;             (magit-list-other-branch-or-commit)
    ;;             :action 'magit-checkout
    ;;             :caller 'counsel-magit-checkout))

    ;; (defun magit-get-current-commit-sha-short (rev)
    ;;   (magit-rev-parse "--short" rev))

    ;; (define-key magit-mode-map "b" 'counsel-magit-checkout)

    ;; (defun magit-comming-message (rev)
    ;;   (magit-rev-format "%s" rev))

    ;; (defun magit-branch-or-commit-at-point-save ()
    ;;   (let (atpoint (magit-branch-or-commit-at-point))
    ;;     (if atpoint atpoint "")
    ;;     )
    ;;   )

    ;; (defun magit-get-upstream-branch-save (rev)
    ;;   (let ((branch (magit-get-upstream-branch rev)))
    ;;     (if branch branch "")
    ;;     ))

    ;; (defun magit-list-other-branch-or-commit ()
    ;;   (let* ((current (magit-get-current-branch))
    ;;          (atpoint (magit-branch-or-commit-at-point))
    ;;          (exclude current)
    ;;          (default (or (and (not (equal atpoint exclude))
    ;;                            (not (and (not current)
    ;;                                      (magit-rev-equal atpoint "HEAD")))
    ;;                            atpoint)
    ;;                       (and (not (equal current exclude)) current)
    ;;                       (magit-get-previous-branch))))
    ;;     (let ((result (delete exclude (magit-list-refnames))))
    ;;       (if atpoint (cons atpoint result) result)
    ;;       )
    ;;     ))

    :hook
    (ediff-mode . ediff-mode-face-config-hook)
    )

  (use-package with-editor
    :ensure t
    )

  (require 'with-editor)
  (require 'magit)

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 "~/.emacs.d/plugins/magit/Documentation/"))
#+END_SRC
** forge
   #+begin_src emacs-lisp
     (use-package forge
       :after magit
       :ensure t)
   #+end_src
** smerge
#+begin_src emacs-lisp
(use-package smerge-mode
:ensure t
:bind (:map smerge-mode-map
("M-p" . smerge-prev)
("M-n" . smerge-next)))
#+end_src
** gitignore-mode
#+begin_src emacs-lisp
(use-package gitignore-mode
             :ensure t
             )
#+end_src
** gitconfig-mode
#+begin_src emacs-lisp
(use-package gitconfig-mode
             :ensure t
             )
#+end_src
** fasd
   #+begin_src emacs-lisp
     (use-package fasd
       :ensure t
       :config
       (global-fasd-mode 1)
       (setq fasd-enable-initial-prompt nil)
       (setq fasd-completing-read-function #'ivy-completing-read)
       (add-to-list 'ivy-sort-functions-alist (cons #'fasd-find-file nil))

       :bind ("M-z" . fasd-find-file)
       )
   #+end_src
* org-mode
** org
 #+BEGIN_SRC emacs-lisp
   (use-package org
     :ensure t
     :init
     (add-hook 'org-mode-hook
               (lambda ()
                 ;; (org-set-local 'yas/trigger-key [tab])
                 (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
     :hook (org-mode . flyspell-mode)
     :custom (org-ellipsis "⤵")
     )
 #+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** org-gcal
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :ensure t)
#+END_SRC
** ox-reveal
** org-re-reveal
#+BEGIN_SRC emacs-lisp
  (use-package org-re-reveal
    :ensure t
    :config (setq org-re-reveal-root "file:///home/xegodup/github/reveal.js")
    )
#+END_SRC
** ox-pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t)
#+END_SRC
** org-capture
*** org-capture-templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ("s" "Should try with emacs" entry (file+olp "~/org/orgzly/Emacs.org" "Should try")
           "* TODO %?\n  %i\n  %T")
          ("m" "Modes to be checked out" entry (file+olp "~/org/orgzly/Emacs.org" "Modes to be checked out")
           "* TODO %?\n  %i\n  %T")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("t" "Task which should be created in jira" entry (file+olp+datetree "~/org/tasks.org")
           "* TODO [#B] %?\nCreated on %U")
          ("i" "Ideas related to common workflow" entry (file+olp "~/org/ideas.org" "Work flow")
           "* %?\nCreated on %U")
          ("a" "Ideas related to ADP" entry (file+olp "~/org/ideas.org" "ADP" )
           "* %?\nCreated on %U")
          ("c" "Create jira case" entry (file "~/org/work/jira/create-case.org")
           "* TODO %?
                :PROPERTIES:
                :type:     Task
                :labels:   %?
                :components: SCTP
              ,** description:
                %?")
          )
        )
#+end_src
** gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t)
#+END_SRC
** gnuplot-mode
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC
** org-mime
#+BEGIN_SRC emacs-lisp
  (use-package org-mime
    :ensure t)
#+END_SRC
** wsd-mode
#+BEGIN_SRC emacs-lisp
  (use-package wsd-mode
    :ensure t)
#+END_SRC
** org-plantuml
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)
   (gnuplot . t)
   ))
(setq org-plantuml-jar-path
      (expand-file-name "~/tools/plantuml.jar"))
#+END_SRC
* other minor stuff
** pandoc
#+BEGIN_SRC emacs-lisp
  (use-package pandoc-mode
    :ensure t)
#+END_SRC
** diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (use-package page-break-lines
      :ensure t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-startup-banner "~/.emacs.d/misc/images/emacs_icon.png")
    (dashboard-setup-startup-hook))
#+end_src
** languages modes
*** groovy
 #+BEGIN_SRC emacs-lisp
   (use-package groovy-mode
     :ensure t
     )
 #+END_SRC
*** markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :config
       (setq browse-url-browser-function 'browse-url-chromium)
       )
   #+END_SRC
**** flymd
   #+BEGIN_SRC emacs-lisp
   (use-package flymd
   :ensure t)
   #+END_SRC
*** yaml
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
                :ensure t
                )
 #+END_SRC
*** dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
*** ansible
#+BEGIN_SRC emacs-lisp
  (use-package ansible
    :ensure t)
#+END_SRC
*** asciidoc
#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :ensure t)
#+END_SRC
*** go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode "\\.tpl$"
    )
#+END_SRC
*** plantuml
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config ;;(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq plantuml-jar-path "~/tools/plantuml.jar"
          plantuml-default-exec-mode 'jar
          plantuml-exec-mode 'jar
          plantuml-server-url '"http://www.plantuml.com"
          )
    )
#+END_SRC
** modelines
*** doom-mode-line
  #+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t)
  #+end_src
  #+begin_src emacs-lisp
    (use-package doom-modeline
      :ensure t
      :defer t
      :hook (after-init . doom-modeline-init))
  #+end_src
** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode)
 #+END_SRC
** midnight
 #+BEGIN_SRC emacs-lisp
 ;; All the buffers that haven’t been visited in 3 days will be killed
 (require 'midnight)
 (midnight-delay-set 'midnight-delay "4:30am")
 #+END_SRC
** htmlize
 #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :ensure t
     )
 #+END_SRC
** disaster
 #+BEGIN_SRC emacs-lisp
   (use-package disaster
     :ensure t
     :bind ("C-c d" . disaster)
     )
 #+END_SRC
** dired-rainbow
 #+BEGIN_SRC emacs-lisp
   (use-package dired-rainbow
     :ensure t
     :hook (help-mode . rainbow-mode))
 #+END_SRC
** rainbow-mode
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t)
 #+END_SRC
** command-log-mode
 #+BEGIN_SRC emacs-lisp
   (use-package command-log-mode
     :ensure t
     :init
     (setq command-log-mode-auto-show t))
 #+END_SRC
** cheat-sheet
 #+begin_src emacs-lisp
   (use-package cheatsheet
     :ensure t)
 #+end_src
*** marking
#+begin_src emacs-lisp
  (cheatsheet-add-group 'Marking
                        '(:key "C-SPC C-SPC" :description "Set mark at the point.")
                        '(:key "C-x C-x" :description "Go back to the mark.")
                        '(:key "C-u C-SPC" :description "Cycle through the mark ring of the current buffer.")
                        '(:key "C-x C-SPC" :description "Cycle through the global mark ring.")
                        '(:key "counsel-mark-ring" :description "Interactive cycle through the mark ring of the current buffer."))
#+end_src
** flyspell-settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC
** flyspell-correct
   #+begin_src emacs-lisp
     (use-package flyspell-correct
       :ensure t
       :after flyspell)
   #+end_src
*** flyspell-correct-popup
Popup with correction candidate
 #+begin_src emacs-lisp
   (use-package flyspell-correct-popup
     :ensure t
     :after flyspell-correct)
 #+end_src
** google-translate
#+begin_src emacs-lisp
  (use-package google-translate
    :ensure t
    :config
    :custom
    (google-translate-default-target-language "ru")
    (google-translate-default-source-language "en")
    (google-translate-backend-method 'curl)
    :bind ("C-c t" . google-translate-at-point)
    )
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
#+end_src
** key-frequency
   Shows frequency of emacs commands
   #+begin_src emacs-lisp
     (use-package keyfreq
       :ensure t
       :disabled t
       :init
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1)
       )
   #+end_src
** dimmer
Dimming the face of non-active buffers
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t
    :ensure t
    :config
    (setq dimmer-exclusion-regexp "magit-popup-mode")
    )
#+end_src
** kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :ensure t)
#+END_SRC
** kubernetes-tramp
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes-tramp
    :ensure t)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t)
#+END_SRC
** markdown-preview-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-mode
    :ensure t)
#+END_SRC
** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+END_SRC
** language-detection
#+BEGIN_SRC emacs-lisp
  (use-package language-detection
    :ensure t)
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC
** disable-mouse
#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :ensure t
    :config (global-disable-mouse-mode)
    )
#+END_SRC
** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd
    :ensure t)
#+end_src
** sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
** oauth2
#+begin_src emacs-lisp
(use-package oauth2
:ensure t)
#+end_src
** simple-httpd
#+begin_src emacs-lisp
(use-package simple-httpd
:ensure t)
#+end_src
* theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :init (load-theme 'zenburn t))
  (set-frame-font "-PfEd-Terminus-normal-normal-normal-*-14-*-72-72-c-*-iso10646-1")
  (setq default-frame-alist '((font . "-PfEd-Terminus-normal-normal-normal-*-14-*-72-72-c-*-iso10646-1")))
  (set-face-background 'show-paren-match "sea green")
  (set-face-background 'show-paren-mismatch "orange red")
  (set-face-foreground 'which-func "#93E0E3")
  (set-face-background 'hl-line "gray5")

  ;; hightlight function calls (they have default color otherwise)
  (defvar font-lock-function-call-face
    'font-lock-function-call-face
    "Face name to use for format specifiers.")

  (defface font-lock-function-call-face
    '((t . (:foreground "#DFAF8F" :bold t)))
    "Face to display method calls in.")

  (font-lock-add-keywords
   'c-mode
   '(("\\(\\w+\\)\\s-*\("
      (1 font-lock-function-call-face)))
   t)

  ;; change 'select region' faces
  (set-face-attribute 'region nil :background "#276E9E")
  (set-face-attribute 'region nil :foreground "#FFFFFF")
  ;; also highlight underlying entities in documentation
  (set-face-attribute 'button nil :foreground "#7F9F7F")
#+END_SRC
* non-elpa
** spotify
  #+begin_src emacs-lisp
    (use-package spotify
      :ensure nil
      :load-path "non-elpa/spotify.el"
      :config
      (setq spotify-oauth2-client-secret "7f213c3a75744a019626242facd63330")
      (setq spotify-oauth2-client-id "d3ecdb988fb44deea00fdfb069cf3753")
      (setq spotify-transport 'connect)
      )
  #+end_src
** no-easy-keys
   Force to use right key in emacs (no arrows / Delete / Home / etc)
  #+begin_src emacs-lisp
    (use-package no-easy-keys
      :ensure nil
      :load-path "non-elpa/emacs-no-easy-keys"
      :config (no-easy-keys 1))
  #+end_src
** company-makefile
  #+begin_src emacs-lisp
    (use-package company-makefile
      :ensure nil
      :load-path "non-elpa/company-makefile")
  #+end_src


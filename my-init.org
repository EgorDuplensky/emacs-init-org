* ORG-HEADER
#+TITLE: Emacs configuration in form of org file
#+STARTIP: My emacs configuration. Synced with Ubuntu through dropbox. =*Edit carefully*=
#+startup: overview
#+creator: Egor Duplensky
#+OPTIONS: toc:2
* common settings
** gnu-elpa-keyring-update
#+begin_src emacs-lisp
 ;; (use-package gnu-elpa-keyring-update)
#+end_src
** Always ask before quit
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Custom variables
#+BEGIN_SRC emacs-lisp
    ;; Save to kill ring before kill
    (setq save-interprogram-paste-before-kill t)
    ;; To avoid initializing twice
    (setq package-enable-at-startup nil)
    ;; to put emacs's autogenerating lisp code into separate file
    (setq custom-file "~/.emacs.d/.emacs-custom.el")
    ;; Treat all custom themes as safe
    (setq custom-safe-themes t)
    ;; Suppress starting emacs message
    (setq inhibit-startup-message 1)
    ;; Top frame: <filename with full path>
    (setq frame-title-format "%b")
    (defvar x-strech-cursor)
    (setq x-strech-cursor 1)
    ;; Copy/paste from another system apps
    (setq x-select-enable-clipboard t)
    ;; scrolling speed
    ;; (setq mouse-wheel-scroll-amount '(2 ((shift) . 2) ((control) . nil)))
    (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Enable/Disable some minor modes
#+BEGIN_SRC emacs-lisp
    ;; Mode line config
    (column-number-mode 1)
    ;; Hide default TOOLBAR
    (hide-ifdef-mode 1)
    ;; Hightlight brackets
    (show-paren-mode t)
    ;; Hightlight current line
    (global-hl-line-mode 1)
    ;; Display the current function name in the mode line
    (which-function-mode 1)
    ;; Disable toolbar
    (tool-bar-mode 0)
    ;; Disable menubar
    (menu-bar-mode 0)
    ;; Disable scrollbar
    (scroll-bar-mode 0)

    (defun my/disable-scroll-bars (frame)
      (modify-frame-parameters frame
                               '((vertical-scroll-bars . nil)
                                 (horizontal-scroll-bars . nil))))
    (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
    ;; Cursor color
    ;; (set-cursor-color "red")
    (blink-cursor-mode 0)
    ;; Overwrite selected text
    (delete-selection-mode 1)
    ;; little bit transparency
    (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
    (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
  ;; fullscreen
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    ;; left fringe for indicators, right fringe for long lines
    (set-fringe-mode '(8 . 8))
#+END_SRC
** Scrolling without moving point
 Useful feature but not sure about bindings yet
 #+BEGIN_SRC emacs-lisp
   (defun gcm-scroll-down ()
     (interactive)
     (scroll-up 1)
     (next-line)
   )
   (defun gcm-scroll-up ()
     (interactive)
     (scroll-down 1)
     (previous-line))
   (global-set-key (kbd "M-p") 'gcm-scroll-up)
   (global-set-key (kbd "M-n") 'gcm-scroll-down)
 #+END_SRC
** Disable alarm bell for "C-g"
 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   (setq visible-bell t)
 #+END_SRC
** y-or-n-p
#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Do not need backup and autosave files
#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# file
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<right>") 'forward-word)
  (global-set-key (kbd "C-<left>") 'backward-word)
  (global-set-key (kbd "C-S-<down>") 'term-send-raw)
  (global-set-key "\M-g" 'goto-line)
  (global-set-key "\C-c\C-c" 'compile)
  (global-set-key "\C-c\C-k" 'indent-for-comment)
  (global-set-key "\C-c\C-l" 'indent-new-comment-line)
  (global-set-key "\C-c\C-s" 'kill-compilation)
  (global-set-key "\C-c\M-b" 'emu-backend-find)
  (global-set-key [(shift f1)] 'next-error)
  (global-set-key (kbd "<return>") 'ignore)
  (define-key global-map [f1] 'next-error)
  (define-key global-map [f2] 'previous-error)
  (define-key global-map [f3] 'previous-error)
  (define-key global-map [f5]  'revert-buffer)
  (define-key global-map [f6]  'ivy-resume)
  (define-key global-map [f7]  'repeat-complex-command)
  (define-key global-map [f9]  'manual-entry)     ;; man <command>
  (define-key global-map [f11]'grep)
  (define-key global-map [f27]'beginning-of-buffer)
  (define-key global-map [f29]'scroll-down)
  (define-key global-map [f33]'end-of-buffer)
  (define-key global-map [f35]'scroll-up)
  (global-unset-key [home])
  (global-unset-key [end])
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
  (define-key function-key-map [home] 'beginning-of-buffer)
  (define-key function-key-map [end] 'end-of-buffer)
#+END_SRC
** line numbers configuration
#+BEGIN_SRC emacs-lisp
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC
** comment / comment out
#+BEGIN_SRC emacs-lisp
  ;; Comment/uncomment current line
  (defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))
  (global-set-key (kbd "C-c C-v") 'comment-or-uncomment-region-or-line)

  (add-hook 'c++-mode-hook (lambda () (setq comment-start "/* "
                                            comment-end   " */")))
#+END_SRC
** ansi-term
Some old settings related to running emacs
in terminal mode. Most likely can be removed.
#+BEGIN_SRC emacs-lisp
  (defun fix-performance-bug ()
    (setq bidi-paragraph-direction 'left-to-right))
  (add-hook 'term-mode-hook 'fix-performance-bug)
#+END_SRC
** ediff
Make vertical split by default
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** auto-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Makefile\\..+" . makefile-mode))
  (add-to-list 'auto-mode-alist '("Dockerfile.+" . dockerfile-mode))
  (add-to-list 'auto-mode-alist '("\\.*bashrc" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.profile" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.xinitrc" . shell-script-mode))
#+END_SRC
** browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+end_src
** autosave bookmarks
#+begin_src emacs-lisp
  (setq bookmark-save-flag t)
#+end_src
** file path to clipboard
Useful when you need to enter file's location in terminal
#+begin_src emacs-lisp
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

#+end_src
** kill all buffers except current one
#+begin_src emacs-lisp
(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
** always truncate line by default
Otherwise it can slow down emacs by a lot
#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src
** set temp directory used by some packages
   #+begin_src emacs-lisp
   (setq-default temporary-file-directory "~/.cache/emacs")
     (unless (file-exists-p temporary-file-directory)
           (make-directory temporary-file-directory))
   #+end_src
** buffer revert automatically
   #+begin_src emacs-lisp
   ;; (setq global-auto-revert-mode t)
   #+end_src
* editing stuff
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    )
#+END_SRC
** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :config (global-hungry-delete-mode))
#+END_SRC
** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :after (org)
    :init
    ;; disable M-q "fill paragraph"
    (defun my-expand-region-bind-hook()
      (local-unset-key (kbd "M-q"))
      )
    (add-hook 'c-mode-hook 'my-expand-region-bind-hook)
    (add-hook 'c++-mode-hook 'my-expand-region-bind-hook)
    :config
    ;; expand region seems to be not working properly with this mode enabled
    (setq shift-select-mode nil)
    :bind
    ("M-q" . er/expand-region)
    )
#+END_SRC
** smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :config (smartparens-global-mode t)
       :custom (sp-escape-quotes-after-insert nil)
       :hook (minibuffer-setup . smartparens-mode)
       )
   #+end_src
** iedit
#+BEGIN_SRC emacs-lisp
  (defun iedit-current-func-mode()
    (interactive)
    (if (bound-and-true-p iedit-mode)
        (iedit-mode)
      (iedit-mode-toggle-on-function)
      )
    )

  (use-package iedit
    :bind
    ("C-;" . iedit-current-func-mode)
    ("C-:" . iedit-mode)
    )

#+END_SRC
** visual-regexp
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :bind
    (("C-c r" . vr/replace)
     ("C-c q" . vr/query-replace)
     ("C-c m" . vr/mc-mark)
     )
    )
#+END_SRC
** ialign
#+begin_src emacs-lisp
  (use-package ialign)
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-enable-key "r"))
#+end_src
** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :init
    (move-text-default-bindings)
    )
#+END_SRC
** dired
Hide extra information by default
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (interactive)
              (dired-omit-mode 1)
              (dired-hide-details-mode 1)
              ))
#+end_src
** peep-dired
Show file at point in other window
#+begin_src emacs-lisp
  (use-package peep-dired)
#+end_src
** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src
* emacs navigation
** ag
#+begin_src emacs-lisp
  (use-package ag)
#+end_src
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind
    (("C-c C-r" . ivy-resume)
     ("M-x"  . counsel-M-x)
     ("C-x C-f" . counsel-find-file))
    :custom-face
    (ivy-current-match ((t
                         :background "#111111"
                         :underline nil
                         :foreground nil
                         )))
    :config
    (setq ivy-format-function 'ivy-format-function-arrow)
    (progn
      (ivy-mode    1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      )
    )
#+END_SRC
*** ivy-rich
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    ;; :after magit
    :ensure nil
    :load-path "/home/egor/git/ivy-rich"
    :init (setq ivy-rich-path-style 'abbrev
                ivy-virtual-abbreviate 'full)
    :config
    (ivy-rich-mode 1)
    (ivy-rich-magit-mode 1)
    (ivy-rich-project-root-cache-mode 1)
    :custom
    (ivy-rich-parse-remote-buffer nil)
    )
#+END_SRC
*** ivy-posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled t ;; when ivy appears on the center it often overlaps important content
    :custom-face
    (ivy-posframe-border ((t (:background "#e6e1dc"))))
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-border-width 1)
    (setq ivy-posframe-height 10)
    (setq ivy-posframe-min-height 10)
    (setq ivy-posframe-width 200)
    (setq ivy-posframe-min-width 200)
    (setq ivy-posframe-parameters '((alpha . 85) (left-fringe 8)))
    (ivy-posframe-mode 0)
    )
#+end_src
*** ivy-prescient
#+begin_src emacs-lisp
    (use-package ivy-prescient
      :after counsel
      :config
      (setq ivy-prescient-retain-classic-highlighting t)
      (setq ivy-prescient-sort-commands '(:not swiper
                                          swiper-isearch
                                          counsel-imenu
                                          lsp-ivy-workspace-symbol
                                          lsp-ivy-global-workspace-symbol
                                          counsel-switch-buffer
                                          ivy-switch-buffer))
      (ivy-prescient-mode 1))
#+end_src
** smex
  Needed for nicer counsel
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (smex-initialize)
    )
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    ("C-x C-M-f" . counsel-fzf)
     (:map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-pretty)
    :config (counsel-mode 1)
    )
#+END_SRC
** counsel-projectile
Use ivy for projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode)
    )
#+END_SRC
** counsel-tramp
#+BEGIN_SRC emacs-lisp
  (use-package counsel-tramp)
#+END_SRC
** ibuffer
*** ibuffer-vc
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)	;
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("magit" (name . "^magit.*$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode) (mode . shell-script-mode)))
                 ("c/c++" (or
                           (mode . c++-mode)
                           (mode . c-mode)))
                 ("tcl" (or
                         (mode . tcl-mode)
                         ))
                 ("log-files" (name . "^\\.log$|messages[.]?[1-9]*$"))
                 ;; ("log-files" (name . "^\\.log$"))
                 ("cnf-files" (name . "^\\.cnf$"))
                 ("xml-files" (name . "^\\.xml$"))
                 ("other-languages" (or
                                     (mode . java-mode)
                                     (mode . python-mode)
                                     (mode . groovy-mode)
                                     ))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ("gdb" (or (mode . gdb-threads-mode) (mode . gud-mode) (mode . gdb-locals-mode) (mode . gdb-inferior-io-mode)))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

              ;; Use human readable Size column instead of original one
              (define-ibuffer-column size-h
                (:name "Size" :inline t)
                (cond
                 ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
                 ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
                 (t (format "%8d" (buffer-size)))))

  ;; Explicitly require ibuffer-vc to get its column definitions, which
  ;; can't be autoloaded
  (require 'ibuffer-vc)

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
  ;; Use more human readable 'ls' options
  (setq dired-listing-switches "-lahF --group-directories-first")
#+END_SRC
*** ibuffer-tramp
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-tramp)
#+END_SRC
** smooth-scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :config
    (setq smooth-scroll-margin 15)
    (smooth-scrolling-mode 1)
    )
#+end_src
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (global-set-key [remap other-window] 'ace-window)
    (setq aw-background nil)
    :custom-face
    (aw-leading-char-face ((t :inherit ace-jump-face-foreground :height 3.0)))
    )
#+END_SRC
** browse-kill-ring
An alternative of counsel-yank-pop
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :init
    (defface my-browse-kill-ring-separator-face
      '((t :foreground "#276E9E"
           :weight bold
           ))
      "Face for browse-kill-ring-separator."
      )
    :config
    (setq browse-kill-ring-highlight-current-entry t)
    (setq browse-kill-ring-separator "-------------------------------------------")
    (setq browse-kill-ring-separator-face 'my-browse-kill-ring-separator-face)
    :bind ("M-y" . browse-kill-ring))
#+END_SRC
** isearch
Enable possibility to exit isearch with leaving cursor
at the beginning of the word (C-Ret)  
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map [(control return)]
  #'isearch-exit-other-end)
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))
#+END_SRC
** ace-isearch
#+BEGIN_SRC emacs-lisp
  (use-package ace-isearch)
#+END_SRC
** centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :init
    (setq centaur-tabs-set-icons t
          centaur-tabs-set-close-button nil
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "●"
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-bar 'over
          centaur-tabs-style "alternate")
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-change-fonts "DejaVu Sans" 100)
    :custom-face
    (tab-line ((t (:background "#2B2B2B"))))
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src
** rg
#+begin_src emacs-lisp
  (use-package rg
    :config (rg-enable-default-bindings))
#+end_src

** transpose-frame
#+begin_src emacs-lisp
  (use-package transpose-frame)
#+end_src
** perspective
   #+begin_src emacs-lisp
     (use-package perspective
       :config (persp-mode))
   #+end_src
** goto-line-preview
   #+begin_src emacs-lisp
     (use-package goto-line-preview
       :config
       (global-set-key [remap goto-line] 'goto-line-preview))
   #+end_src
** beacon
   #+begin_src emacs-lisp
     (use-package beacon
       :config
       (setq beacon-color 0.5)
       (beacon-mode 1)
       :bind ("M-]" . beacon-blink)
      )
   #+end_src
* code navigation
** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deffered)
    :init
    (setq lsp-clients-clangd-executable "clangd")
    (setq lsp-clients-clangd-args '("--clang-tidy"
                                    "--completion-style=detailed"
                                    "--background-index"
                                    ))
    (setq lsp-auto-guess-root t)
    (setq lsp-signature-render-documentation t)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-headerline-breadcrumb-segments '(symbols))
    (setq lsp-headerline-breadcrumb-icons-enable t)
    (setq lsp-symbol-highlighting-skip-current t)
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-imenu-sort-methods '(position))
    :config
    (lsp-enable-which-key-integration t)
    (eldoc-mode nil)
    :hook ((c++-mode c-mode) . lsp)
    :bind
    ("M-." . xref-find-definitions)
    ("M-?" . xref-find-references)
    ("M-," . xref-pop-marker-stack)
    ("M-i" . imenu)
    )
  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol
    :bind
    ("C-c C-g" . lsp-ivy-workspace-symbol))
  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background "#4F4F4F"))))
    (lsp-headerline-breadcrumb-path-face ((t :inherit treemacs-directory-face)))
    (lsp-face-highlight-textual ((t :background "#7F9F7F" :foreground "#FFFFFD" :weight normal)))
    :init
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-doc-show-with-mouse nil)
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-border "#F6F3E8")
    (setq lsp-ui-doc-position 'top)
    (setq lsp-ui-doc-use-childframe t)
    (setq lsp-ui-imenu-auto-refresh t)
    (setq lsp-ui-doc-frame-parameters '((left . -1)
                                        (no-focus-on-map . t)
                                        (min-width . 0)
                                        (width . 0)
                                        (min-height . 0)
                                        (height . 0)
                                        (internal-border-width . 1)
                                        (border-width . 1)
                                        (border-color . "#FFFFFD")
                                        (vertical-scroll-bars)
                                        (horizontal-scroll-bars)
                                        (right-fringe . 1)
                                        (menu-bar-lines . 0)
                                        (tool-bar-lines . 0)
                                        (line-spacing . 0)
                                        (unsplittable . t)
                                        (undecorated . t)
                                        (top . -1)
                                        (visibility)
                                        (mouse-wheel-frame)
                                        (no-other-frame . t)
                                        (inhibit-double-buffering . t)
                                        (drag-internal-border . t)
                                        (no-special-glyphs . t)
                                        (desktop-dont-save . t)
                                        ;;(font . "-PfEd-Terminus (TTF)-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
                                        ))
    )
  (use-package lsp-treemacs
    :commands (lsp-treemacs-errors-list lsp-treemacs-symbols)
    :after (treemacs)
    :config
    (setq lsp-treemacs-symbols-position-params '((side . right)
                                                 (slot . 2)
                                                 (window-width . 60)))
    (setq lsp-treemacs-theme "Default")
    (lsp-treemacs-sync-mode 1)
    )
  (use-package dap-mode
    :config
    (require 'dap-lldb)
    (require 'dap-cpptools)
    (setq dap-lldb-debug-program '("/usr/bin/lldb-vscode-12"))
    (defun my/debug ()
      (interactive)
      (dap-debug
       (list :name "Debug cpuFuncTests"
        :type "lldb-vscode"
        :request "launch"
        :program (read-file-name "Path to binary: ")
        :args (split-string (read-from-minibuffer "Command line rguments: "))
        ;;:program "${workspaceFolder}/bin/intel64/Debug/benchmark_app"
        ;;:args ["-niter", "1", "-nstreams", "1", "-m", "/mnt/icv_bench_cache/DL_benchmarking_models/mobilenet-v2/caffe/caffe/FP32/1/dldt/mobilenet-v2.xml"],
        :stopOnEntry t
        :cwd "${workspaceFolder}"
        :env []
        :externalConsole: nil)))
    ;; (setq dap-lldb-debugged-program-function )
    )
#+end_src
** call-graph
Breaks emacs after update. Disabled for now.
#+BEGIN_SRC emacs-lisp
  (use-package call-graph
    :config 
    (setq cg-path-to-global "/usr/bin/"))
#+END_SRC
* coding facilities
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    )

  (use-package flycheck-google-cpplint
    :config
    ;;(flycheck-remove-next-checker 'irony
    ;;                           '(warning . c/c++-googlelint))
    )
#+END_SRC
*** flycheck-posframe
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
    :after flycheck
    :hook (flycheck-mode . flycheck-pos-tip-mode)
    )
#+END_SRC
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :defer t
    :init
    (defun company-term-hook ()
      (company-mode -1)
      )
    (progn
      (add-hook 'term-mode-hook 'company-term-hook)
      (add-hook 'after-init-hook 'global-company-mode)
      )
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :config
    (setq company-require-match nil)
    :init
    (add-hook 'sh-mode-hook
              '(lambda ()
                 (set (make-local-variable 'company-backends)
                      '((company-capf company-shell company-shell-env company-fish-shell)))))
    (use-package company-quickhelp
      :config
      (company-quickhelp-mode 1)
      (setq company-quickhelp-delay 1)
      :bind ("\C-c h" . #'company-quickhelp-manual-begin))
    (use-package company-ansible)
    (use-package company-emoji)
    (setq company-idle-delay              0.5
          company-minimum-prefix-length   0
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil
          )

    :bind ("\C-q" . company-complete-tooltip-row)
    )

#+END_SRC
** yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :requires yasnippet)
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    )
  #+END_SRC
*** ivy-yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package ivy-yasnippet
    :requires yasnippet)
  #+END_SRC
** cpp-auto-include
#+begin_src emacs-lisp
  (use-package cpp-auto-include)
#+end_src
** hide-if-def
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'hide-ifdef-mode)
#+END_SRC
** hideshow-org
#+begin_src emacs-lisp
  (use-package hideshow-org
    :bind ("C-t" . hs-toggle-hiding))
#+end_src
** tabs and indentations
#+BEGIN_SRC emacs-lisp
;;(customize-variable (quote tab-stop-list))
(setq c-default-style "bsd"
      c-basic-offset 4)
(custom-set-variables
 '(tab-stop-list (number-sequence 4 120 4)))
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
;; don't indent "case" branch in "switch" according to coding style
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-offset 'case-label '0)))
#+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl)
#+END_SRC
** quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src
** git-messenger
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :config
    (setq git-messenger:use-magit-popup t))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC
** clang-format
   #+begin_src emacs-lisp
     (use-package clang-format)
   #+end_src
** gdb
#+begin_src emacs-lisp
(setq gdb-show-changed-values t)
(setq gdb-restore-window-configuration-after-quit t)
(add-hook 'kill-buffer-hook 'comint-write-input-ring)
#+end_src

** ws-butler
   #+begin_src emacs-lisp
     (use-package ws-butler
       :hook (prog-mode . ws-butler-mode))
   #+end_src
* project/git stuff
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching t)
    :bind (:map projectile-mode-map
    ("C-c p" . projectile-command-map))
    )
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :config
      (setq treemacs-follow-after-init          t
            treemacs-width                      60
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-position                   'left)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode nil)
      (setq treemacs-no-png-images nil)
    :bind
    (:map global-map
          ([f8]         . treemacs)
          ("M-0"        . treemacs-select-window)
          ("C-c 1"      . treemacs-delete-other-windows)
          )
     :custom-face
     (treemacs-root-face ((t
                          :Weight 'bold
                          :height 1.4
                          )))
                          )
  (use-package treemacs-all-the-icons
    :config
    (treemacs-load-theme "all-the-icons")
    )

  (use-package treemacs-magit)

  (use-package treemacs-projectile
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
           :map magit-file-section-map
           ("RET" . magit-diff-visit-file-other-window)
           :map magit-hunk-section-map
           ("RET" . magit-diff-visit-file-other-window))
    :custom-face
    ;; revert diff faces which was changed to more bright version
    (magit-diff-added ((t (:background "#2F4F2F"))))
    (magit-diff-added-highlight ((t (:background "#3F5F3F"))))
    (magit-diff-removed ((t (:backgorund "#6C3333"))))
    (magit-diff-removed-highlight ((t (:background "#7C4343"))))
    ;; use yellow for magit 'in progress' command at mode-line
    (magit-mode-line-process ((t :inherit 'mode-line-buffer-id )))

  :config
    (setq magit-diff-refine-hunk t)
    (setq transient-display-buffer-action '(display-buffer-below-selected))
    (setq magit-ediff-dwim-show-on-hunks t)
    (setq ediff-make-buffers-readonly-at-startup t)
    (defun ediff-mode-face-config-hook ()
      (set-face-attribute 'ediff-even-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-even-diff-B nil :inherit 'magit-diff-added)
      (set-face-attribute 'ediff-odd-diff-A nil :inherit 'magit-diff-removed)
      (set-face-attribute 'ediff-odd-diff-B nil :inherit 'magit-diff-added))
  :hook
  (ediff-mode . ediff-mode-face-config-hook)
  )

  (use-package with-editor)

  (require 'with-editor)
  (require 'magit)

  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
                 "~/.emacs.d/plugins/magit/Documentation/"))
#+END_SRC
** forge
   #+begin_src emacs-lisp
     (use-package forge
       :after magit
     )
   #+end_src
** code-review
   #+begin_src emacs-lisp
     (use-package code-review
       :after magit
     )
   #+end_src
** smerge
#+begin_src emacs-lisp
(use-package smerge-mode
:bind (:map smerge-mode-map
("M-p" . smerge-prev)
("M-n" . smerge-next)))
#+end_src
** git-modes
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src
** fasd
   #+begin_src emacs-lisp
     (use-package fasd
       :config
       (global-fasd-mode 1)
       (setq fasd-enable-initial-prompt nil)
       (setq fasd-completing-read-function #'ivy-completing-read)
       (add-to-list 'ivy-sort-functions-alist (cons #'fasd-find-file nil))

       :bind ("M-z" . fasd-find-file)
       )
   #+end_src
* email
** mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/local/share/emacs/site-lisp/mu4e"
    ;; :defer 20 ; Wait until 20 seconds after startup
    :config
    (require 'mu4e-org)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/mail")

    (setq mu4e-contexts
          (list
           ;; Work account
           (make-mu4e-context
            :name "Main"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail/egor-duplensky" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "egor.duplensky@gmail.com")
                    (user-full-name    . "Egor Duplensky")
                    (mu4e-drafts-folder  . "/gmail/egor-duplensky/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/gmail/egor-duplensky/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/gmail/egor-duplensky/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/gmail/egor-duplensky/[Gmail]/Trash")))))

    (setq mu4e-maildir-shortcuts
          '(("/gmail/egor-duplensky/Inbox"          . ?i)
            ("/gmail/egor-duplensky/[Gmail]/Sent Mail"   . ?s)
            ("/gmail/egor-duplensky/[Gmail]/Trash"  . ?t)
            ("/gmail/egor-duplensky/[Gmail]/Drafts" . ?d)
            ("/gmail/egor-duplensky/[Gmail]/All Mail"    . ?a))))
#+end_src
** mu4e-alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :init
    (mu4e-alert-enable-notifications)
    :config
    (mu4e-alert-enable-mode-line-display)
    (setq doom-modeline-mu4e nil))
#+end_src
* org-mode
** org
 #+BEGIN_SRC emacs-lisp
   (use-package org
     :init
     (add-hook 'org-mode-hook
               (lambda ()
                 (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
     :hook (org-mode . flyspell-mode)
     :custom (org-ellipsis "⤵")
     :config
     (defun org-table-convert-semicolon ()
       (interactive)
       (org-table-create-or-convert-from-region ";")
       )
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"))
     :custom-face
     (org-table ((t
                  :foreground "#FFFFFF"
                  )))
     )
 #+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** org-gcal
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal)
#+END_SRC
** ox-reveal
** org-re-reveal
#+BEGIN_SRC emacs-lisp
  (use-package org-re-reveal
    :config (setq org-re-reveal-root "file:///home/egor/git/reveal.js")
    )
#+END_SRC
** ox-pandoc
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc)
#+END_SRC
** org-capture
*** org-capture-templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ("i" "Ideas" entry (file+olp "~/org/notes.org" "Ideas")
           "* %?\nCreated on %U")
          ("n" "Information" entry (file+olp "~/org/notes.org" "Info")
           "* %?\nCreated on %U")
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("w" "Work to be done" entry (file+olp "~/org/work.org" "To be done")
           "* %?\nCreated on %U")
          )
        )
#+end_src
** gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)
#+END_SRC
** gnuplot-mode
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot-mode)
#+END_SRC
** org-mime
#+BEGIN_SRC emacs-lisp
  (use-package org-mime)
#+END_SRC
** wsd-mode
#+BEGIN_SRC emacs-lisp
  (use-package wsd-mode)
#+END_SRC
** org-plantuml
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)
   (gnuplot . t)
   ))
(setq org-plantuml-jar-path
      (expand-file-name "~/tools/plantuml.jar"))
#+END_SRC
* other minor stuff
** pandoc
#+BEGIN_SRC emacs-lisp
  (use-package pandoc-mode)
#+END_SRC
** diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    ;; :init
    ;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (use-package page-break-lines)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src
** languages modes
*** python
    #+begin_src emacs-lisp
      (use-package jedi)
      (use-package lsp-jedi
        :config
        (with-eval-after-load "lsp-mode"
          (setq lsp-disabled-clients '(jedi))
          (setq lsp-enabled-clients '(pylsp pyls jedi clangd))
          )
        :hook
        (python-mode . lsp)
        )
      (use-package cython-mode)
    #+end_src
*** groovy
 #+BEGIN_SRC emacs-lisp
   (use-package groovy-mode
     )
 #+END_SRC
*** markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :config
       (setq browse-url-browser-function 'browse-url-chrome)
       )
   #+END_SRC
**** flymd
   #+BEGIN_SRC emacs-lisp
   (use-package flymd)
   #+END_SRC
*** yaml
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-imenu)
 #+END_SRC
*** dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
*** ansible
#+BEGIN_SRC emacs-lisp
  (use-package ansible)
#+END_SRC
*** asciidoc
#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode)
#+END_SRC
*** go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.tpl$"
    )
#+END_SRC
*** plantuml
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :config ;;(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq plantuml-jar-path "~/tools/plantuml.jar"
          plantuml-default-exec-mode 'jar
          plantuml-exec-mode 'jar
          plantuml-server-url '"http://www.plantuml.com"
          )
    )
#+END_SRC
** modelines
*** doom-mode-line
  #+begin_src emacs-lisp
    (use-package all-the-icons
      :config
      ;; Make sure the icon fonts are good to go
      (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
      (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append))
  #+end_src
  #+begin_src emacs-lisp
    (use-package doom-modeline
      :defer t
      :hook (after-init . doom-modeline-init)
      :init
      (setq doom-modeline-icon t)
      (setq doom-modeline-height 35)
      (setq doom-modeline-major-mode-color-icon nil))
  #+end_src
** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :diminish which-key-mode)
 #+END_SRC
** midnight
 #+BEGIN_SRC emacs-lisp
   ;; All the buffers that haven’t been visited in 7 days will be killed
   ;; (require 'midnight)
   ;; (setq clean-buffer-list-delay-general 7) ;; week
   ;; (midnight-delay-set 'midnight-delay "4:30am")
 #+END_SRC
** htmlize
 #+BEGIN_SRC emacs-lisp
   (use-package htmlize)
 #+END_SRC
** disaster
 #+BEGIN_SRC emacs-lisp
   (use-package disaster
     :bind ("C-c d" . disaster)
     )
 #+END_SRC
** rmsbolt
#+begin_src emacs-lisp :tangle yes
  (use-package rmsbolt
    :custom-face
    (rmsbolt-current-line-face ((t
                                 :inherit hl-line
                                 )))
    )
#+end_src
** dired-rainbow
 #+BEGIN_SRC emacs-lisp
   (use-package dired-rainbow
     :hook (help-mode . rainbow-mode))
 #+END_SRC
** rainbow-mode
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode)
 #+END_SRC
** command-log-mode
 #+BEGIN_SRC emacs-lisp
   (use-package command-log-mode
     :init
     (setq command-log-mode-auto-show t))
 #+END_SRC
** cheat-sheet
 #+begin_src emacs-lisp
   (use-package cheatsheet)
 #+end_src
*** marking
#+begin_src emacs-lisp
  (cheatsheet-add-group 'Marking
                        '(:key "C-SPC C-SPC" :description "Set mark at the point.")
                        '(:key "C-x C-x" :description "Go back to the mark.")
                        '(:key "C-u C-SPC" :description "Cycle through the mark ring of the current buffer.")
                        '(:key "C-x C-SPC" :description "Cycle through the global mark ring.")
                        '(:key "counsel-mark-ring" :description "Interactive cycle through the mark ring of the current buffer."))
#+end_src
** flyspell-settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC
** flyspell-correct
   #+begin_src emacs-lisp
     (use-package flyspell-correct
       :after flyspell)
   #+end_src
*** flyspell-correct-popup
Popup with correction candidate
 #+begin_src emacs-lisp
   (use-package flyspell-correct-popup
     :after flyspell-correct)
 #+end_src
** google-translate
#+begin_src emacs-lisp
  (use-package google-translate
    :config
    :custom
    (google-translate-default-target-language "ru")
    (google-translate-default-source-language "en")
    (google-translate-backend-method 'curl)
    :bind ("C-c t" . google-translate-at-point)
    )
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
#+end_src
** key-frequency
   Shows frequency of emacs commands
   #+begin_src emacs-lisp
     (use-package keyfreq
       :disabled t
       :init
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1)
       )
   #+end_src
** dimmer
Dimming the face of non-active buffers
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t
    :config
    (setq dimmer-exclusion-regexp "magit-popup-mode")
    )
#+end_src
** kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes)
#+END_SRC
** kubernetes-tramp
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes-tramp)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)
#+END_SRC
** markdown-preview-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-mode)
#+END_SRC
** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC
** language-detection
#+BEGIN_SRC emacs-lisp
  (use-package language-detection)
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC
** disable-mouse
#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :config (global-disable-mouse-mode)
    )
#+END_SRC
** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src
** sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src
** oauth2
#+begin_src emacs-lisp
(use-package oauth2)
#+end_src
** simple-httpd
#+begin_src emacs-lisp
(use-package simple-httpd)
#+end_src
** csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :config
    (setq csv-separators '(";"))
  )

#+end_src
** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap descrive-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
  )
#+end_src
** selectric-mode
#+begin_src emacs-lisp
  (use-package selectric-mode)
#+end_src
** visual-fill-column
   #+begin_src emacs-lisp
     (use-package visual-fill-column
       :config
       (setq visual-fill-column-center-text t)
       (setq visual-fill-column-width 160))
   #+end_src
** stripe-buffer
   #+begin_src emacs-lisp
     (use-package stripe-buffer
       :custom-face
       (stripe-highlight ((t
                         :background "#333333"
                         )))
       )
   #+end_src
** bash-completion
   #+begin_src emacs-lisp
     (use-package bash-completion
       :config
       (bash-completion-setup)
       )
   #+end_src
* theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :init (load-theme 'zenburn t))
  (set-face-background 'show-paren-match "sea green")
  (set-face-background 'show-paren-mismatch "orange red")
  (set-face-foreground 'which-func "#93E0E3")
  (set-face-background 'hl-line "#111111")

  ;; hightlight function calls (they have default color otherwise)
  (defvar font-lock-function-call-face
    'font-lock-function-call-face
    "Face name to use for format specifiers.")

  (defface font-lock-function-call-face
    '((t . (:foreground "#DFAF8F" :bold t)))
    "Face to display method calls in.")

  (font-lock-add-keywords
   'c-mode
   '(("\\(\\w+\\)\\s-*\("
      (1 font-lock-function-call-face)))
   t)

  ;; change 'select region' faces
  (set-face-attribute 'region nil :background "#276E9E")
  (set-face-attribute 'region nil :foreground "#FFFFFF")
  ;; also highlight underlying entities in documentation
  (set-face-attribute 'button nil :foreground "#7F9F7F")
  ;; Font settings really depends on host / monitor / remote desktop / etc
  ;; (set-frame-font "-Xos4-Terminus-normal-normal-normal-*-18-*-*-*-m-*-iso10646-1")
  ;; (setq default-frame-alist '((font . "-Xos4-Terminus-normal-normal-normal-*-18-*-*-*-m-*-iso10646-1")))
  ;; (set-face-attribute 'fixed-pitch nil :family "Terminus (TTF)")
  (set-frame-font "-GOOG-Noto Sans Mono-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1")
  (setq default-frame-alist '((font . "-GOOG-Noto Sans Mono-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1")))
  #+END_SRC
* non-elpa

* tmp
  #+begin_src emacs-lisp
    (setenv "_FASD_DATA" (concat (getenv "HOME") "/.cache/fasd/.fasd"))
  #+end_src
